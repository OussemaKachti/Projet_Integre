{% extends 'baseAdmin.html.twig' %}
{% block title %}Admin's Dashboard
{% endblock %}
{% block body %}
	<div class="content-wrapper p-0">
		<div class="row m-0">
			<div class="col-12 p-0">
				<div class="card h-100">
					<div class="card-body">
						<h4 class="card-title">Admin's Dashboard</h4>
						{% for message in app.flashes('success') %}
							<div class="alert alert-success">
								{{ message }}
							</div>
						{% endfor %}

						<p class="card-description mb-4">List of users</p>

						<!-- Search and Filters -->
						<div class="row mb-4">
							<div class="col-md-6">
								<div class="form-group">
									<div class="input-group">
										<input type="text" id="search-input" class="form-control" placeholder="Search by name, email or phone..." value="{{ searchQuery }}">
										<div class="input-group-append">
											<button id="search-button" class="btn btn-primary" type="button">
												<i class="mdi mdi-magnify"></i>
											</button>
										</div>
									</div>
								</div>
							</div>
							<div class="col-md-6">
								<div class="row">
									<div
										class="col-md-4">
										{# Example filter HTML in admin.html.twig #}
										<select id="role-filter" class="form-select">
											<option value="">All Roles</option>
											{% for role in availableRoles %}
												<option value="{{ role }}" {% if roleFilter == role %} selected {% endif %}>{{ role }}</option>
											{% endfor %}
										</select>
									</div>
									<div class="col-md-4">
										<select id="status-filter" class="form-control">
											<option value="">All Statuses</option>
											<option value="active" {% if statusFilter == 'active' %} selected {% endif %}>Active</option>
											<option value="disabled" {% if statusFilter == 'disabled' %} selected {% endif %}>Disabled</option>
										</select>
									</div>
									<div class="col-md-4">
										<select id="verification-filter" class="form-control">
											<option value="">All Verification</option>
											<option value="verified" {% if verificationFilter == 'verified' %} selected {% endif %}>Verified</option>
											<option value="not-verified" {% if verificationFilter == 'not-verified' %} selected {% endif %}>Not Verified</option>
										</select>
									</div>
								</div>
							</div>
						</div>

						<!-- Loading Indicator -->
						<div id="loading-indicator" class="text-center mb-3" style="display: none;">
							<div class="spinner-border text-primary" role="status">
								<span class="sr-only">Loading...</span>
							</div>
						</div>

						<div class="table-responsive">
							<table class="table table-hover w-100">
								<thead>
									<tr>
										<th>Name</th>
										<th>Email</th>
										<th>Phone Number</th>
										<th>Role</th>
										<th>Verification</th>
										<th>Status</th>
										<th>Actions</th>
									</tr>
								</thead>
								<tbody id="user-table-body">
									{% include '_table_body.html.twig' with {'pagination': pagination} %}
								</tbody>
							</table>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>

	<!-- Pagination Controls -->
	<div class="mt-4 d-flex justify-content-center">
		{{ knp_pagination_render(pagination, '@KnpPaginator/Pagination/bootstrap_v5_pagination.html.twig', {}, {
        'q': app.request.query.get('q'),
        'role': app.request.query.get('role'),
        'status': app.request.query.get('status'),
        'verification': app.request.query.get('verification')
    }) }}
	</div>

	<style>
		.content-wrapper {
			padding: 0 !important;
			margin: 0 !important;
			width: 100% !important;
		}
		.card {
			margin: 0 !important;
			border-radius: 0 !important;
		}
		.table-responsive {
			margin: -1rem !important; /* Compensate for card-body padding */
			padding: 1rem !important;
		}
		.table {
			margin-bottom: 0 !important;
		}

		.footer {
			position: fixed;
			bottom: 0;
			right: 0;
			width: calc(100% - 260px); /* Adjust for sidebar width */
			background: white;
			z-index: 1;
			padding: 1rem;
			border-top: 1px solid #e5e5e5;
		}

		.main-panel {
			padding-bottom: 60px; /* Add padding to prevent content from being hidden behind footer */
		}

		/* Adjust footer width when sidebar is collapsed */
		.sidebar-icon-only .footer {
			width: calc(100% - 70px);
		}


		.actions-column {
			text-align: center;
		}

		.action-buttons {
			display: flex;
			align-items: center;
			justify-content: center;
			gap: 10px;
		}

		.plusButton {
			position: relative;
			display: flex;
			justify-content: center;
			align-items: center;
			border: 1px solid white;
			width: 1.8rem;
			height: 1.8rem;
			background-color: #000;
			overflow: hidden;
		}

		.bin-button {
			display: flex;
			flex-direction: column;
			align-items: center;
			justify-content: center;
			width: 25px;
			height: 25px;
			border-radius: 5px;
			background-color: rgb(255, 95, 95);
			cursor: pointer;
			border: 3px solid rgb(255, 201, 201);
			transition-duration: 0.3s;
		}

		.bin-button:hover {
			background-color: rgb(255, 0, 0);
		}
	</style>

	<script>
		document.addEventListener('DOMContentLoaded', function () {
const searchInput = document.getElementById('search-input');
const roleFilter = document.getElementById('role-filter');
const statusFilter = document.getElementById('status-filter');
const verificationFilter = document.getElementById('verification-filter');
const tableBody = document.getElementById('user-table-body');
const loadingIndicator = document.getElementById('loading-indicator');
const paginationContainer = document.querySelector('.mt-4.d-flex.justify-content-center');

let timeoutId;

function fetchResults(page = null) {
console.log('Fetching results with filters:');
console.log('Search:', searchInput ? searchInput.value : 'not found');
console.log('Role:', roleFilter ? roleFilter.value : 'not found');
console.log('Status:', statusFilter ? statusFilter.value : 'not found');
console.log('Verification:', verificationFilter ? verificationFilter.value : 'not found');

if (loadingIndicator) {
loadingIndicator.style.display = 'block';
}

const params = new URLSearchParams();

if (searchInput && searchInput.value.trim() !== '') {
params.append('q', searchInput.value.trim());
}

if (roleFilter && roleFilter.value !== '') {
params.append('role', roleFilter.value);
}

if (statusFilter && statusFilter.value !== '') {
params.append('status', statusFilter.value);
}

if (verificationFilter && verificationFilter.value !== '') {
params.append('verification', verificationFilter.value);
}

if (page) {
params.append('page', page);
}

const url = '/admin?' + params.toString();
console.log('Request URL:', url);

// Update URL in browser without page reload
window.history.replaceState(null, '', url);

// Fetch the results via AJAX
fetch(url, {
headers: {
'X-Requested-With': 'XMLHttpRequest'
}
}).then(response => {
if (!response.ok) {
throw new Error('Network response was not ok');
}
return response.text();
}).then(html => {
if (tableBody) {
tableBody.innerHTML = html;
}

if (loadingIndicator) {
loadingIndicator.style.display = 'none';
}

// Get updated pagination from server
const paginationUrl = url + '&pagination_only=1';
console.log('Pagination URL:', paginationUrl);

fetch(paginationUrl, {
headers: {
'X-Requested-With': 'XMLHttpRequest'
}
}).then(response => response.text()).then(paginationHtml => {
if (paginationContainer) {
paginationContainer.innerHTML = paginationHtml;
attachPaginationHandlers();
}
}).catch(error => {
console.error('Error fetching pagination:', error);
});
}).catch(error => {
console.error('Error fetching results:', error);

if (loadingIndicator) {
loadingIndicator.style.display = 'none';
}

if (tableBody) {
tableBody.innerHTML = '<tr><td colspan="5" class="text-center">No results found or an error occurred.</td></tr>';
}
});
}

function attachPaginationHandlers() {
const paginationLinks = document.querySelectorAll('.pagination a.page-link');
console.log('Attaching handlers to pagination links:', paginationLinks.length);

paginationLinks.forEach(link => {
link.addEventListener('click', function (e) {
e.preventDefault();
console.log('Pagination link clicked:', this.href);
const url = new URL(this.href);
const page = url.searchParams.get('page');
fetchResults(page);
});
});
}

// Initial pagination handlers
attachPaginationHandlers();

if (searchInput) {
searchInput.addEventListener('input', function () {
console.log('Search input changed:', this.value);
clearTimeout(timeoutId);
timeoutId = setTimeout(() => fetchResults(), 300);
});
}

if (roleFilter) {
roleFilter.addEventListener('change', function () {
console.log('Role filter changed:', this.value);
fetchResults();
});
}

if (statusFilter) {
statusFilter.addEventListener('change', function () {
console.log('Status filter changed:', this.value);
fetchResults();
});
}

if (verificationFilter) {
verificationFilter.addEventListener('change', function () {
console.log('Verification filter changed:', this.value);
fetchResults();
});
}

const searchButton = document.getElementById('search-button');
if (searchButton) {
searchButton.addEventListener('click', function () {
console.log('Search button clicked');
fetchResults();
});
}
});
	</script>
{% endblock %}
