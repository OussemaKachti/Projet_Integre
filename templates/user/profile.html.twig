{% extends 'base.html.twig' %}

{% block title %}New User
{% endblock %}

{% block body %}
	<main>

		<!-- breadcrumb area start -->
		<section class="breadcrumb_area include-bg pt-150 pb-150 breadcrumb_overlay" data-background="{{ asset('front_assets/img/breadcrumb/breadcrumb-bg-1.jpg') }}">
			<div class="container">
				<div class="row">
					<div class="col-xxl-12">
						<div class="breadcrumb__content text-center p-relative z-index-1">
							<h3 class="breadcrumb__title">My Profile</h3>
							<div class="breadcrumb__list">
								<span>
									<a href="index.html">Home</a>
								</span>
								<span class="dvdr">
									<i class="fa-regular fa-angle-right"></i>
								</span>
								<span>My Profile</span>
							</div>
						</div>
					</div>
				</div>
			</div>
		</section>
		<!-- breadcrumb area end -->

		<!-- profile area start -->
		<section class="profile__area pt-120 pb-50 grey-bg-2">
			<div class="container">
				<div class="profile__basic-inner pb-20 white-bg">
					<div class="row align-items-center">
						<div class="col-xxl-6 col-md-6">
							<div class="profile__basic d-md-flex align-items-center">
								<div class="profile__basic-thumb mr-30 position-relative">
									<div class="profile-picture-container">
										{% if user.profilePicture %}
											<img src="{{ asset('uploads/profiles/' ~ user.profilePicture) }}" alt="{{ user.prenom }} {{ user.nom }}" class="profile-picture">
										{% else %}
											<img src="{{ asset('front_assets/img/blog/comments/user.png') }}" alt="Default profile" class="profile-picture">
										{% endif %}

										<div class="profile-picture-overlay">
											<button type="button" class="change-picture-btn" id="changePictureBtn">
												<i class="fa-regular fa-camera"></i>
											</button>
										</div>
									</div>
								</div>
								<div class="profile__basic-content">
									<h3 class="profile__basic-title">
										Welcome Back
										<span>{{ user.prenom ?? '' }}
											{{ user.nom ?? '' }}</span>
									</h3>

								</div>
							</div>
						</div>
						<div class="col-xxl-6 col-md-6">
							<div class="profile__basic-cart d-flex align-items-center justify-content-md-end">
								<div class="cart-info mr-10">
									<a href="cart.html">View cart</a>
								</div>
								<div class="cart-item">
									<a href="cart.html">
										<i class="fa-regular fa-basket-shopping"></i>
										<span class="cart-quantity">2</span>
									</a>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</section>
		<!-- profile area end -->

		<!-- profile menu area start -->
		<section class="profile__menu pb-70 grey-bg-2">
			<div class="container">
				<div class="row">
					<div class="col-xxl-4 col-md-4">
						<div class="profile__menu-left white-bg mb-50">
							<h3 class="profile__menu-title" style="color: black;">
								<i class="fa-regular fa-square-list"></i>
								Your Menu</h3>
							<div class="profile__menu-tab">
								<div class="nav nav-tabs flex-column justify-content-start text-start" id="nav-tab" role="tablist">
									<button class="nav-link active" id="nav-account-tab" data-bs-toggle="tab" data-bs-target="#nav-account" type="button" role="tab" aria-controls="nav-account" aria-selected="true">
										<i class="fa-regular fa-user"></i>
										My Account</button>

									<button class="nav-link" id="nav-password-tab" data-bs-toggle="tab" data-bs-target="#nav-password" type="button" role="tab" aria-controls="nav-password" aria-selected="false">
										<i class="fa-regular fa-lock"></i>Change Password</button>
									<a href="{{path('app_logout')}}" class="nav-link">
										<i class="fa-regular fa-arrow-right-from-bracket"></i>
										Logout</a>
								</div>
							</div>
						</div>
					</div>
					<div class="col-xxl-8 col-md-8">
						<div class="profile__menu-right">
							<div class="tab-content" id="nav-tabContent">
								<div class="tab-pane fade show active" id="nav-account" role="tabpanel" aria-labelledby="nav-account-tab">
									<div class="profile__info">
										<div class="profile__info-top d-flex justify-content-between align-items-center">
											<h3 class="profile__info-title">Profile Information</h3>
											<button class="profile__info-btn" type="button" data-bs-toggle="modal" data-bs-target="#profile_edit_modal">
												<i class="fa-regular fa-pen-to-square"></i>
												Edit Profile
											</button>
										</div>

										<div class="profile__info-wrapper white-bg">
											{% for label, messages in app.flashes %}
												{% for message in messages %}
													<div class="alert alert-{{ label == 'error' ? 'danger' : label }} mb-4">
														{{ message }}
													</div>
												{% endfor %}
											{% endfor %}

											<div class="profile__info-item">
												<p>Name</p>
												<h4>
													{% if app.user.prenom is defined and app.user.prenom and app.user.nom is defined and app.user.nom %}
														{{ app.user.prenom }}
														{{ app.user.nom }}
													{% else %}
														<span class="text-muted">Not provided</span>
													{% endif %}
												</h4>
											</div>

											<div class="profile__info-item">
												<p>Email</p>
												<h4>
													{% if app.user.email is defined and app.user.email %}
														{{ app.user.email }}
													{% else %}
														<span class="text-muted">Not provided</span>
													{% endif %}
												</h4>
											</div>

											<div class="profile__info-item">
												<p>Phone</p>
												<h4>
													{% if app.user.tel is defined and app.user.tel %}
														{{ app.user.tel }}
													{% else %}
														<span class="text-muted">Not provided</span>
													{% endif %}
												</h4>
											</div>

											<div class="profile__info-item">
												<p>Role</p>
												<h4>
													{% if app.user.roles is defined and app.user.roles %}
														{% set roleLabels = {
                        'ROLE_USER': 'User',
                        'ROLE_ADMIN': 'Administrator',
                        'ROLE_SUPER_ADMIN': 'Super Administrator'
                    } %}
														{% for role in app.user.roles %}
															{% if role in roleLabels|keys %}
																<span class="badge bg-primary">{{ roleLabels[role] }}</span>
															{% else %}
																<span class="badge bg-secondary">{{ role }}</span>
															{% endif %}
														{% endfor %}
													{% else %}
														<span class="text-muted">Not assigned</span>
													{% endif %}
												</h4>
											</div>
										</div>
									</div>
								</div>
								<div class="tab-pane fade" id="nav-order" role="tabpanel" aria-labelledby="nav-order-tab">
									<div class="order__info">
										<div class="order__info-top d-flex justify-content-between align-items-center">
											<h3 class="order__info-title">My Orders</h3>
											<button type="button" class="order__info-btn">
												<i class="fa-regular fa-trash-can"></i>
												Clear</button>
										</div>


									</div>
								</div>
								<div class="tab-pane fade" id="nav-password" role="tabpanel" aria-labelledby="nav-password-tab">
									<div class="password__change">
										<div class="password__change-top">
											<h3 class="password__change-title">Change Password</h3>
											{% for message in app.flashes('error') %}
												<div class="alert alert-danger">
													{{ message }}
												</div>
											{% endfor %}
											{% for message in app.flashes('success') %}
												<div class="alert alert-success">
													{{ message }}
												</div>
											{% endfor %}
										</div>
										<div class="password__form white-bg">

											<form action="{{ path('app_change_password') }}" method="POST" id="changePasswordForm" novalidate>
												<input type="hidden" name="active_tab" value="password">
												<div class="password__input">
													<p>Old Password</p>
													<input type="password" name="oldPassword" id="oldPassword" required placeholder="Enter Old Password">
													<span class="error-message" id="oldPasswordError">
														{% for message in app.flashes('error') %}
															{% if message == 'Current password is incorrect' %}
																{{ message }}
															{% endif %}
														{% endfor %}
													</span>

												</div>
												<div class="password__input">
													<p>New Password</p>
													<input type="password" name="newPassword" id="newPassword" required placeholder="Enter New Password">
													<span class="error-message" id="newPasswordError"></span>
													<div class="password-requirements" id="passwordRequirements">
														<p class="requirements-title">Password must include:</p>
														<ul>
															<li id="length-check">At least 8 characters</li>
															<li id="uppercase-check">At least one uppercase letter</li>
															<li id="lowercase-check">At least one lowercase letter</li>
															<li id="number-check">At least one number</li>
															<li id="special-check">At least one special character (#?!@$%^&*-)</li>
														</ul>
													</div>
												</div>
												<div class="password__input">
													<p>Confirm Password</p>
													<input type="password" name="confirmPassword" id="confirmPassword" required placeholder="Confirm Password">
													<span class="error-message" id="confirmPasswordError"></span>
												</div>
												<div class="password__input">
													<button type="submit" class="tp-btn" id="submitButton">Update password</button>
												</div>
											</form>

											<style>
												.error-message {
													color: #dc3545;
													font-size: 14px;
													margin-top: 5px;
													display: block;
												}

												.password-requirements {
													font-size: 14px;
													margin-top: 10px;
													padding: 10px;
													border: 1px solid #ddd;
													border-radius: 4px;
													display: none;
												}

												.password-requirements ul {
													margin: 5px 0 0 20px;
													padding: 0;
												}

												.requirements-title {
													margin: 0;
													font-weight: bold;
												}

												.requirement-met {
													color: #28a745;
												}

												.requirement-unmet {
													color: #dc3545;
												}
											</style>

											<script>
												document.addEventListener('DOMContentLoaded', function () {
const form = document.getElementById('changePasswordForm');
const oldPassword = document.getElementById('oldPassword');
const newPassword = document.getElementById('newPassword');
const confirmPassword = document.getElementById('confirmPassword');
const oldPasswordError = document.getElementById('oldPasswordError');
const newPasswordError = document.getElementById('newPasswordError');
const confirmPasswordError = document.getElementById('confirmPasswordError');
const passwordRequirements = document.getElementById('passwordRequirements');

// Password requirement elements
const lengthCheck = document.getElementById('length-check');
const uppercaseCheck = document.getElementById('uppercase-check');
const lowercaseCheck = document.getElementById('lowercase-check');
const numberCheck = document.getElementById('number-check');
const specialCheck = document.getElementById('special-check');

// Show password requirements when the new password field is focused
newPassword.addEventListener('focus', function () {
passwordRequirements.style.display = 'block';
});

// Hide password requirements when clicked outside
document.addEventListener('click', function (event) {
if (event.target !== newPassword && ! passwordRequirements.contains(event.target)) {
passwordRequirements.style.display = 'none';
}
});

// Real-time validation for new password
newPassword.addEventListener('input', validateNewPassword);

function validateNewPassword() {
const value = newPassword.value;
let valid = true;

// Check length
if (value.length >= 8) {
lengthCheck.classList.add('requirement-met');
lengthCheck.classList.remove('requirement-unmet');
} else {
lengthCheck.classList.add('requirement-unmet');
lengthCheck.classList.remove('requirement-met');
valid = false;
}

// Check uppercase
if (/[A-Z]/.test(value)) {
uppercaseCheck.classList.add('requirement-met');
uppercaseCheck.classList.remove('requirement-unmet');
} else {
uppercaseCheck.classList.add('requirement-unmet');
uppercaseCheck.classList.remove('requirement-met');
valid = false;
}

// Check lowercase
if (/[a-z]/.test(value)) {
lowercaseCheck.classList.add('requirement-met');
lowercaseCheck.classList.remove('requirement-unmet');
} else {
lowercaseCheck.classList.add('requirement-unmet');
lowercaseCheck.classList.remove('requirement-met');
valid = false;
}

// Check number
if (/[0-9]/.test(value)) {
numberCheck.classList.add('requirement-met');
numberCheck.classList.remove('requirement-unmet');
} else {
numberCheck.classList.add('requirement-unmet');
numberCheck.classList.remove('requirement-met');
valid = false;
}

// Check special character
if (/[#?!@$%^&*-]/.test(value)) {
specialCheck.classList.add('requirement-met');
specialCheck.classList.remove('requirement-unmet');
} else {
specialCheck.classList.add('requirement-unmet');
specialCheck.classList.remove('requirement-met');
valid = false;
}

// Clear previous error
newPasswordError.textContent = '';

return valid;
}

// Real-time validation for password confirmation
confirmPassword.addEventListener('input', function () {
validateConfirmPassword();
});

function validateConfirmPassword() {
if (confirmPassword.value !== newPassword.value) {
confirmPasswordError.textContent = 'Passwords do not match';
return false;
} else {
confirmPasswordError.textContent = '';
return true;
}
}

// Form submission handler
form.addEventListener('submit', function (e) {
let isValid = true;

// Reset error messages
oldPasswordError.textContent = '';
newPasswordError.textContent = '';
confirmPasswordError.textContent = '';

// Validate old password
if (! oldPassword.value.trim()) {
oldPasswordError.textContent = 'Old password cannot be empty';
isValid = false;
}

// Validate new password
if (! newPassword.value.trim()) {
newPasswordError.textContent = 'New password cannot be empty';
isValid = false;
} else if (! validateNewPassword()) {
newPasswordError.textContent = 'Password must include uppercase, lowercase, numbers, and special characters';
isValid = false;
}

// Validate password confirmation
if (! confirmPassword.value.trim()) {
confirmPasswordError.textContent = 'Please confirm your password';
isValid = false;
} else if (! validateConfirmPassword()) {
isValid = false;
}

if (! isValid) {
e.preventDefault();
}
});
});
											</script>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			</section>
			<!-- profile menu area end -->

			<div
				class="profile__edit-modal">
				<!-- Modal -->
				<div class="modal fade" id="profile_edit_modal" tabindex="-1" aria-hidden="true">
					<div class="modal-dialog modal-dialog-centered">
						<div class="modal-content">
							<div class="profile__edit-close">
								<button type="button" class="profile__edit-close-btn" data-bs-dismiss="modal">
									<i class="fa-light fa-xmark"></i>
								</button>
							</div>
							<div class="profile__edit-wrapper">
								<div class="profile__edit-header">
									<h4 class="profile__edit-title">Update Your Profile</h4>
									<p class="profile__edit-subtitle">Make changes to your personal information</p>
								</div>

								<form action="{{ path('app_update_profile') }}" method="POST" id="profileEditForm" novalidate>
									<div class="profile__edit-input">
										<p>Name</p>
										<div class="profile__input-wrapper">
											<i class="fa-regular fa-user"></i>
											<input type="text" name="full_name" placeholder="First Name Last Name" value="{{ (user.prenom ?? '') ~ ' ' ~ (user.nom ?? '') }}">
										</div>
										<span class="error-message" id="full_name-error">
											{% for message in app.flashes('error') %}
												{% if message starts with 'Please provide both' or message starts with 'First name' or message starts with 'Last name' %}
													{{ message }}
												{% endif %}
											{% endfor %}
										</span>
									</div>

									<div class="profile__edit-input">
										<p>Email</p>
										<div class="profile__input-wrapper">
											<i class="fa-regular fa-envelope"></i>
											<input type="email" name="email" placeholder="Your Email" value="{{ user.email ?? ''}}">
										</div>
										<span class="error-message" id="email-error">
											{% for message in app.flashes('error') %}
												{% if message starts with 'The email' or message starts with 'Email' %}
													{{ message }}
												{% endif %}
											{% endfor %}
										</span>
									</div>

									<div class="profile__edit-input">
										<p>Phone Number</p>
										<div class="profile__input-wrapper">
											<i class="fa-regular fa-phone"></i>
											<input type="text" name="phone" placeholder="Your Phone" value="{{ user.tel ?? ''}}">
										</div>
										<span class="error-message" id="phone-error">
											{% for message in app.flashes('error') %}
												{% if message starts with 'Invalid phone' or message starts with 'Phone' %}
													{{ message }}
												{% endif %}
											{% endfor %}
										</span>
									</div>

									<div class="profile__edit-input">
										<p>Current Password
											<span class="text-danger">*</span>
										</p>
										<div class="profile__input-wrapper">
											<i class="fa-regular fa-lock"></i>
											<input type="password" name="current_password" id="current_password" placeholder="Enter your current password" required>
										</div>
										<span class="error-message" id="current_password-error"></span>
										<small class="password-help-text">Please enter your current password to confirm these changes</small>
									</div>

									<div class="profile__edit-actions">
										<button type="button" class="tp-btn-grey" data-bs-dismiss="modal">Cancel</button>
										<button type="submit" class="tp-btn">Update Profile</button>
									</div>
								</form>
							</div>
						</div>
					</div>
				</div>
			</div>

			<!-- Profile Picture Update Modal -->
			<div class="modal fade" id="profile_picture_modal" tabindex="-1" aria-hidden="true">
				<div class="modal-dialog modal-dialog-centered">
					<div class="modal-content">
						<div class="profile__edit-close">
							<button type="button" class="profile__edit-close-btn" data-bs-dismiss="modal">
								<i class="fa-light fa-xmark"></i>
							</button>
						</div>
						<div class="profile__edit-wrapper">
							<div class="profile__edit-header">
								<h4 class="profile__edit-title">Update Profile Picture</h4>
								<p class="profile__edit-subtitle">Choose a new profile picture</p>
							</div>

							<form action="{{ path('app_update_profile_picture') }}" method="POST" id="profilePictureForm" enctype="multipart/form-data" novalidate>
								<div class="profile__edit-input text-center">
									<div class="profile-picture-preview mb-4">
										<img id="picturePreview" src="{% if user.profilePicture %}{{ asset('uploads/profiles/' ~ user.profilePicture) }}{% else %}{{ asset('front_assets/img/blog/comments/user.png') }}{% endif %}" alt="Profile preview" style="width: 150px; height: 150px; object-fit: cover; border-radius: 50%;">
									</div>

									<label for="new_profile_picture" class="custom-file-upload">
										<i class="fa-regular fa-upload"></i>
										Choose Image
									</label>
									<input type="file" name="profile_picture" id="new_profile_picture" accept="image/*" class="d-none">

									<span class="file-selected-name d-block mt-2" id="fileSelectedName">No file selected</span>

									<span class="error-message text-center" id="picture_error">
										{% for message in app.flashes('error') %}
											{% if message starts with 'The uploaded profile picture' or message starts with 'Failed to upload profile' %}
												{{ message }}
											{% endif %}
										{% endfor %}
									</span>
								</div>

								<div class="profile__edit-input mt-4">
									<p>Current Password
										<span class="text-danger">*</span>
									</p>
									<div class="profile__input-wrapper">
										<i class="fa-regular fa-lock"></i>
										<input type="password" name="current_password" id="picture_password" placeholder="Enter your current password" required>
									</div>
									<span class="error-message" id="picture_password_error"></span>
									<small class="password-help-text">Please enter your current password to confirm this change</small>
								</div>

								<div class="profile__edit-actions">
									<button type="button" class="tp-btn-grey" data-bs-dismiss="modal">Cancel</button>
									<button type="submit" class="tp-btn" id="updatePictureBtn">Update Picture</button>
								</div>
							</form>
						</div>
					</div>
				</div>
			</div>

			<style>
				.btn-primary {
					background-color: #6366f1;
					border: none;
					padding: 0.75rem 1.5rem;
					transition: all 0.3s ease;
				}

				.btn-primary:hover {
					background-color: #4f46e5;
					transform: translateY(-1px);
				}

				.invalid-feedback {
					display: block;
					font-size: 0.875rem;
				}

				/* Enhanced modal styling */
				.profile__edit-header {
					text-align: center;
					margin-bottom: 25px;
				}

				.profile__edit-title {
					font-size: 24px;
					margin-bottom: 5px;
					color: #000;
				}

				.profile__edit-subtitle {
					color: #6c757d;
					font-size: 14px;
				}

				.profile__input-wrapper {
					position: relative;
					margin-bottom: 8px;
				}

				.profile__input-wrapper i {
					position: absolute;
					left: 15px;
					top: 50%;
					transform: translateY(-50%);
					color: #6c757d;
				}

				.profile__input-wrapper input {
					padding-left: 40px !important;
					border-radius: 6px;
					border: 1px solid #e2e8f0;
					transition: all 0.3s ease;
				}

				.profile__input-wrapper input:focus {
					border-color: #6366f1;
					box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
				}

				.profile__edit-actions {
					display: flex;
					justify-content: space-between;
					margin-top: 25px;
				}

				.tp-btn-grey {
					background-color: #e2e8f0;
					color: #4b5563;
					border: none;
					padding: 10px 25px;
					border-radius: 5px;
					font-weight: 500;
					transition: all 0.3s ease;
				}

				.tp-btn-grey:hover {
					background-color: #cbd5e1;
				}

				.tp-btn {
					padding: 10px 25px;
					border-radius: 5px;
				}

				.modal-content {
					border-radius: 10px;
					border: none;
					box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
				}

				.password-help-text,
				.image-help-text {
					display: block;
					color: #6c757d;
					font-size: 12px;
					margin-top: 5px;
				}

				.error-message {
					color: #dc3545;
					font-size: 14px;
					margin-top: 5px;
					display: block;
				}

				/* Animation for the modal */
				.modal.fade .modal-dialog {
					transition: transform 0.3s ease-out;
				}

				.modal.show .modal-dialog {
					transform: none;
				}
				

				.profile__basic-thumb {
    position: relative !important;
    width: 100px !important;
    height: 100px !important;
    border-radius: 50% !important;
    overflow: hidden !important;
    margin: 0 !important;
    padding: 0 !important;
}

.profile__basic-thumb .profile-picture-container {
    width: 100px !important;
    height: 100px !important;
    position: relative !important;
    margin: 0 !important;
    padding: 0 !important;
    border-radius: 50% !important;
    overflow: hidden !important;
}

.profile__basic-thumb img,
.profile-picture {
    position: absolute !important;
    top: 0 !important;
    left: 0 !important;
    width: 100px !important;
    height: 100px !important;
    object-fit: cover !important;
    border-radius: 50% !important;
    margin: 0 !important;
    padding: 0 !important;
    display: block !important;
    border: none !important;
}

.profile-picture-overlay {
    position: absolute !important;
    top: 0 !important;
    left: 0 !important;
    width: 100px !important;
    height: 100px !important;
    background-color: rgba(0, 0, 0, 0.5) !important;
    border-radius: 50% !important;
    display: flex !important;
    justify-content: center !important;
    align-items: center !important;
    opacity: 0;
    transition: opacity 0.3s ease;
}

				.profile-picture-container:hover .profile-picture-overlay {
					opacity: 1;
				}

				.change-picture-btn {
					background: none;
					border: none;
					color: white;
					font-size: 24px;
					cursor: pointer;
				}

				.custom-file-upload {
					display: inline-block;
					padding: 10px 20px;
					background-color: #6366f1;
					color: white;
					border-radius: 5px;
					cursor: pointer;
					transition: all 0.3s ease;
				}

				.custom-file-upload:hover {
					background-color: #4f46e5;
					transform: translateY(-2px);
				}

				.file-selected-name {
					font-size: 14px;
					color: #6c757d;
				}
			</style>

			<script>
				document.addEventListener('DOMContentLoaded', function (){
					{% if app.session.get('password_tab_active') %}
const passwordTab = document.getElementById('nav-password-tab');
if (passwordTab) {
passwordTab.click();
}

// Tell the server to clean up the session variable
fetch('{{ path("app_profile") }}?cleanup=true');{% endif %}

// Profile picture change functionality
const changePictureBtn = document.getElementById('changePictureBtn');
const profilePictureModal = new bootstrap.Modal(document.getElementById('profile_picture_modal'));

// Open modal when change picture button is clicked
if (changePictureBtn) {
changePictureBtn.addEventListener('click', function () {
profilePictureModal.show();
});
}

// Preview image when selected
const newProfilePicture = document.getElementById('new_profile_picture');
const picturePreview = document.getElementById('picturePreview');
const fileSelectedName = document.getElementById('fileSelectedName');

if (newProfilePicture && picturePreview) {
newProfilePicture.addEventListener('change', function (e) {
if (this.files && this.files[0]) {
const file = this.files[0];

// Update the "file selected" text
fileSelectedName.textContent = file.name;

// Create a preview
const reader = new FileReader();
reader.onload = function (event) {
picturePreview.src = event.target.result;
}
reader.readAsDataURL(file);

// Validate the file
validateProfilePictureFile(file);
}
});
}

// Picture form validation
const profilePictureForm = document.getElementById('profilePictureForm');
const picturePasswordInput = document.getElementById('picture_password');
const pictureError = document.getElementById('picture_error');
const picturePasswordError = document.getElementById('picture_password_error');

function validateProfilePictureFile(file) {
pictureError.textContent = '';

if (file) {
const fileSize = file.size / 1024 / 1024; // in MB
const fileType = file.type;

if (! fileType.startsWith('image/')) {
pictureError.textContent = 'Please upload an image file';
return false;
}

if (fileSize > 5) {
pictureError.textContent = 'File size should not exceed 5MB';
return false;
}
}
return true;
}

function validatePicturePassword() {
picturePasswordError.textContent = '';

if (! picturePasswordInput.value.trim()) {
picturePasswordError.textContent = 'Password is required to confirm changes';
return false;
} else if (picturePasswordInput.value.length < 8) {
picturePasswordError.textContent = 'Password should be at least 8 characters';
return false;
}
return true;
}

// Password field validation
if (picturePasswordInput) {
picturePasswordInput.addEventListener('input', validatePicturePassword);
}

// Form submission
if (profilePictureForm) {
profilePictureForm.addEventListener('submit', function (e) { // Check if an image was selected
if (newProfilePicture.files.length === 0) {
pictureError.textContent = 'Please select an image';
e.preventDefault();
return;
}

// Validate password
const isPasswordValid = validatePicturePassword();
if (! isPasswordValid) {
e.preventDefault();
picturePasswordInput.focus();
}

// Validate image file again
const isPictureValid = validateProfilePictureFile(newProfilePicture.files[0]);
if (! isPictureValid) {
e.preventDefault();
}
});
}
});
			</script>

			<script>
document.addEventListener('DOMContentLoaded', function () {
    const profileForm = document.getElementById('profileEditForm');
    const fullNameInput = document.querySelector('input[name="full_name"]');
    const emailInput = document.querySelector('input[name="email"]');
    const phoneInput = document.querySelector('input[name="phone"]');
    const currentPasswordInput = document.getElementById('current_password');

    const fullNameError = document.getElementById('full_name-error');
    const emailError = document.getElementById('email-error');
    const phoneError = document.getElementById('phone-error');
    const currentPasswordError = document.getElementById('current_password-error');

    // Add input event listeners for real-time validation
    fullNameInput.addEventListener('input', function () {
        validateName();
    });

    emailInput.addEventListener('input', function () {
        validateEmail();
    });

    phoneInput.addEventListener('input', function () {
        validatePhone();
    });

    currentPasswordInput.addEventListener('input', function () {
        validatePassword();
    });

    // Validation functions
    function validateName() {
        fullNameError.textContent = '';

        if (!fullNameInput.value.trim()) {
            fullNameError.textContent = 'Name cannot be empty';
            return false;
        } else {
            const nameParts = fullNameInput.value.trim().split(' ');
            if (nameParts.length < 2 || !nameParts[0] || !nameParts[1]) {
                fullNameError.textContent = 'Please provide both first and last name';
                return false;
            }
            
            // Get first and last name
            const firstName = nameParts[0];
            const lastName = nameParts.slice(1).join(' ');
            
            // Check for numbers in first name
            if (/\d/.test(firstName)) {
                fullNameError.textContent = 'First name cannot contain numbers';
                return false;
            }
            
            // Check for numbers in last name
            if (/\d/.test(lastName)) {
                fullNameError.textContent = 'Last name cannot contain numbers';
                return false;
            }
            
            // Check for invalid characters in first name
            if (!/^[a-zA-ZÀ-ÿ\s\'-]+$/u.test(firstName)) {
                fullNameError.textContent = 'First name can only contain letters, spaces, hyphens and apostrophes';
                return false;
            }
            
            // Check for invalid characters in last name
            if (!/^[a-zA-ZÀ-ÿ\s\'-]+$/u.test(lastName)) {
                fullNameError.textContent = 'Last name can only contain letters, spaces, hyphens and apostrophes';
                return false;
            }
        }
        return true;
    }

    function validateEmail() {
        emailError.textContent = '';

        if (!emailInput.value.trim()) {
            emailError.textContent = 'Email cannot be empty';
            return false;
        } 
        
        // Basic format validation
        const basicFormatRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!basicFormatRegex.test(emailInput.value)) {
            emailError.textContent = 'The email is not a valid email address.';
            return false;
        }
        
        // Extract domain and TLD
        const parts = emailInput.value.split('@');
        const domain = parts[1];
        const domainParts = domain.split('.');
        const tld = domainParts[domainParts.length - 1].toLowerCase();
        
        // Valid TLDs list (subset of common ones)
        const validTlds = [
            'com', 'org', 'net', 'edu', 'gov', 'mil', 'int', 'io', 'co', 
            'uk', 'fr', 'de', 'jp', 'au', 'ca', 'tn', 'us', 'ru', 'ch', 'it', 
            'nl', 'se', 'no', 'es', 'dev', 'info', 'biz', 'me', 'tv', 'app'
        ];
        
        // Validate TLD
        if (!validTlds.includes(tld)) {
            emailError.textContent = 'The email domain must end with a valid top-level domain.';
            return false;
        }
        
        return true;
    }

    function validatePhone() {
        phoneError.textContent = '';

        if (!phoneInput.value.trim()) {
            phoneError.textContent = 'Phone number cannot be empty';
            return false;
        } else if (!/^((\+|00)216)?([2579][0-9]{7}|(3[012]|4[01]|8[0128])[0-9]{6}|42[16][0-9]{5})$/.test(phoneInput.value)) {
            phoneError.textContent = 'Invalid phone number format';
            return false;
        }
        return true;
    }

    function validatePassword() {
        currentPasswordError.textContent = '';

        if (!currentPasswordInput.value.trim()) {
            currentPasswordError.textContent = 'Password is required to confirm changes';
            return false;
        } else if (currentPasswordInput.value.length < 8) {
            currentPasswordError.textContent = 'Password should be at least 8 characters';
            return false;
        }
        return true;
    }

    // Form submission handler
    profileForm.addEventListener('submit', function (e) {
        // Validate all fields
        const isNameValid = validateName();
        const isEmailValid = validateEmail();
        const isPhoneValid = validatePhone();
        const isPasswordValid = validatePassword();

        // If any validation fails, prevent form submission
        if (!isNameValid || !isEmailValid || !isPhoneValid || !isPasswordValid) {
            e.preventDefault();

            // Highlight the first field with an error
            if (!isNameValid) fullNameInput.focus();
            else if (!isEmailValid) emailInput.focus();
            else if (!isPhoneValid) phoneInput.focus();
            else if (!isPasswordValid) currentPasswordInput.focus();
        }
    });

    // Show animation when modal opens
    const profileModal = document.getElementById('profile_edit_modal');
    profileModal.addEventListener('show.bs.modal', function () {
        // Clear previous validation errors
        fullNameError.textContent = '';
        emailError.textContent = '';
        phoneError.textContent = '';
        currentPasswordError.textContent = '';

        // Clear password field
        currentPasswordInput.value = '';
    });
});
</script>
		</main>
	{% endblock %}
