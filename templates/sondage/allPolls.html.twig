{% extends 'base.html.twig' %}

{% block title %}{% endblock %}

{% block body %}
	<main>
		<!-- breadcrumb area start -->
		<section class="breadcrumb__area include-bg pt-150 pb-150 breadcrumb__overlay" data-background="{{asset('front_assets/img/breadcrumb/poll.jpg')}}">
			<div class="container">
				<div class="row w-100">
					<div class="col-xxl-12">
						<div class="breadcrumb__content text-center p-relative z-index-1">
							<h3 class="breadcrumb__title">All Polls</h3>
							<div class="breadcrumb__list">
								<span>
									<a href="index.html">Home</a>
								</span>
								<span class="dvdr">
									<i class="fa-regular fa-angle-right"></i>
								</span>
								<span>Polls</span>
							</div>
						</div>
					</div>
				</div>
			</div>
		</section>
		<!-- breadcrumb area end -->

		<!-- Page Principale -->
		<section class="blog__area pt-120 pb-120">
			<div class="container">
				<div
					class="row">

					<!-- Liste des sondages -->
					<section class="cart-area pt-120 pb-120">
						<div class="container">
							<div class="row ">
								<div class="col-12">
									<div class="admin-container">
										<h2>Poll Management</h2>

										{% if search_query is defined and search_query is not empty %}
											<p>Search results for:
												<strong>{{ search_query }}</strong>
											</p>
										{% endif %}
<div class="d-flex justify-content-between align-items-center mb-3">
    <a href="{{ path('app_sondage_index') }}" class="btn btn-secondary">Back</a>

    <!-- Barre de recherche -->
    <div class="header__search w-25 d-none d-xl-block">
        <form method="GET" action="{{ path('api_polls_search') }}">
            <div class="header__search-input">
                <input type="text" name="q" class="form-control" placeholder="Search polls..." required>
                <button type="submit" class="header__search-btn">
                    <svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M8.11117 15.2222C12.0385 15.2222 15.2223 12.0385 15.2223 8.11111C15.2223 4.18375 12.0385 1 8.11117 1C4.18381 1 1.00006 4.18375 1.00006 8.11111C1.00006 12.0385 4.18381 15.2222 8.11117 15.2222Z" stroke="#031220" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        <path d="M17 17L13.1334 13.1333" stroke="#031220" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                </button>
            </div>
        </form>
    </div>
</div>


										<table>
											<thead>
												<tr>
													<th>Question</th>
													<th>Options</th>
													<th>Date Created</th>
													<th>Actions</th>
												</tr>
											</thead>
											<tbody>
												{% for sondage in sondages %}
													<tr>
														<td>{{ sondage.question }}</td>
														<td>{{ sondage.choix|map(choice => choice.contenu)|join(', ') }}</td>
														<td>{{ sondage.createdAt|date('Y-m-d H:i:s') }}</td>
														<td>
															<div class="d-flex gap-2">
																<button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#editPollModal" onclick="openEditModal({{ sondage.id }})">Edit</button>
																<button class="btn btn-danger" onclick="deletePoll({{ sondage.id }})">Delete</button>
															</div>
														</td>
													</tr>
												{% else %}
													<tr>
														<td colspan="4">No polls found.</td>
													</tr>
												{% endfor %}
											</tbody>

											<!-- Toast Notification -->
											<div id="toastContainer" class="toast-container position-fixed bottom-0 end-0 p-3" style="z-index: 9999;">
												<div id="toastMessage" class="toast align-items-center text-white bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true">
													<div class="d-flex">
														<div class="toast-body">
															Action completed successfully!
														</div>
														<button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
													</div>
												</div>
											</div>


										</table>
									</div>
								</div>
							</div>
						</div>
					</section>
				</div>
			</div>
		</section>


		<!-- Modal for Edit Poll -->
		<div id="editPollModal" class="modal" tabindex="-1" aria-hidden="true">
			<div class="modal-dialog">
				<div class="modal-content">
					<div class="modal-header">
						<h5 class="modal-title">Edit Poll</h5>
						<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
					</div>
					<div class="modal-body">
						<form id="edit-poll-form" method="POST" action="#">
							<div class="form-group">
								<label for="poll-question">Question</label>
								<input type="text" id="poll-question" name="question" class="form-control" placeholder="Poll Question">
							</div>
							<div class="form-group">
								<label>Options</label>
								<div
									id="options-container"><!-- Options will be dynamically filled here -->
								</div>
								<br>
								<button class="btn btn-secondary" type="button" onclick="addOption()">+ Add option</button>
							</div>
							<br>
							<button type="submit" class="btn btn-primary">Save Changes</button>
						</form>
					</div>
				</div>
			</div>
		</div>

		<style>
			body {
				font-family: Arial, sans-serif;
				background-color: #f4f4f4;
				margin: 0;
				padding: 20px;
			}

			.admin-container {
				width: 100%;
				max-width: 1200px;
				background: white;
				padding: 20px;
				border-radius: 8px;
				box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
				margin: auto;
			}

			h2 {
				text-align: center;
				margin-bottom: 20px;
			}

			table {
				width: 100%;
				border-collapse: collapse;
				margin-top: 10px;
			}

			th,
			td {
				padding: 12px;
				text-align: left;
				border-bottom: 1px solid #ddd;
			}

			th {
				background-color: rgb(6, 65, 128);
				color: white;
			}

			tr:hover {
				background-color: #f1f1f1;
			}

			.actions {
				display: flex;
				gap: 10px;
			}

			.btn {
				padding: 5px 10px;
				border: none;
				cursor: pointer;
				border-radius: 4px;
			}

			.btn-edit {
				background-color: #28a745;
				color: white;
			}

			.btn-delete {
				background-color: #dc3545;
				color: white;
			}

			.container {
				max-width: 100% !important;
				width: 95%;
			}

			/* Responsive */
			@media(max-width: 768px) {
				table {
					font-size: 14px;
				}

				.btn {
					padding: 4px 8px;
					font-size: 12px;
				}
			}
		</style>
	</main>

	<script>


		function showToast(message, type = "success") {
let toastElement = document.getElementById("toastMessage");
let toastBody = toastElement.querySelector(".toast-body");

// Modifier le message et la couleur du toast selon le type
toastBody.textContent = message;
toastElement.classList.remove("bg-success", "bg-danger");
toastElement.classList.add(type === "error" ? "bg-danger" : "bg-success");

// Afficher le toast correctement
let toast = new bootstrap.Toast(toastElement);
toast.show();

// Masquer le toast après 3 secondes (optionnel)
setTimeout(() => {
toast.hide();
}, 1500);
}

function deletePoll(id) {
if (confirm("Are you sure you want to delete this poll?")) { // Simuler la suppression (remplace ceci par une requête AJAX si nécessaire)
showToast("Poll deleted successfully!", "success");
}
}

function openEditModal(id) {
showToast("Poll is ready to be edited!", "success");
}


document.addEventListener('DOMContentLoaded', function () { // Fonction pour récupérer les sondages via l'API
fetch('/sondage/AllPolls', {
method: 'GET',
headers: {
'Content-Type': 'application/json',
'Authorization': 'Bearer ' + '{{ app.request.cookies.get("YOUR_AUTH_COOKIE") }}' // Si tu utilises des tokens JWT ou un autre mécanisme d'authentification
}
}).then(response => response.json()).then(data => {
if (data.status === 'success') {
const tableBody = document.getElementById('poll-table-body');
data.sondages.forEach(sondage => {
const row = document.createElement('tr');
row.innerHTML = `
                    <td>${
sondage.question
}</td>
                    <td>${
sondage.choix.map(choix => choix.contenu).join(', ')
}</td>
                    <td>${
sondage.date_creation
}</td>
                     <td>
        <div class="d-flex gap-2">
            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#editPollModal" onclick="openEditModal(${
sondage.id
})">Edit</button>
            <button class="btn btn-danger" onclick="deletePoll(${
sondage.id
})">Delete</button>
        </div>
    </td>
                `;
tableBody.appendChild(row);
});
} else {
console.error(data.message);
}
}).catch(error => {
console.error('Error fetching polls:', error);
});

// Fonction pour supprimer un sondage
window.deletePoll = function (pollId) {
if (confirm('Are you sure you want to delete this poll?')) {
fetch (`/sondage/delete/${pollId}`, {
method: 'POST',
headers: {
'Content-Type': 'application/json',
'Authorization': 'Bearer ' + '{{ app.request.cookies.get("YOUR_AUTH_COOKIE") }}' // Si nécessaire
}
}).then(response => response.json()).then(data => {
if (data.message && data.message === 'Survey successfully deleted') {
alert('Poll deleted successfully!');
location.reload(); // Recharger la page pour actualiser la liste
} else {
alert('Error: ' + (
data.error || 'Unknown error occurred'
));
}
}).catch(error => {
console.error('Error deleting poll:', error);
alert('An error occurred while deleting the poll');
});
}
};

// Ouvrir le modal et charger les données du sondage
window.openEditModal = function (pollId) {
fetch (`/sondage/api/poll/${pollId}`).then(response => response.json()).then(data => {
if (data.status === 'success') {
const poll = data.sondage;
document.getElementById('poll-question').value = poll.question;
const optionsContainer = document.getElementById('options-container');
optionsContainer.innerHTML = ''; // Clear previous options
poll.choix.forEach((choix, index) => {
const optionInput = document.createElement('input');
optionInput.type = 'text';
optionInput.classList.add('form-control');
optionInput.value = choix.contenu;
optionInput.name = `choix[${index}]`; // Assigner un nom unique pour chaque choix
optionsContainer.appendChild(optionInput);
});
// Mettre à jour l'action du formulaire pour inclure l'ID du sondage
document.getElementById('edit-poll-form').action = `/sondage/api/poll/${pollId}`;
} else {
alert('Error fetching poll data');
}
}).catch(error => {
console.error('Error:', error);
});
};

// Ajouter une option supplémentaire
window.addOption = function () {
const optionInput = document.createElement('input');
optionInput.type = 'text';
optionInput.classList.add('form-control');
optionInput.placeholder = 'New Option';
optionInput.name = 'choix[]'; // Assigner un nom pour collecter un tableau de choix
document.getElementById('options-container').appendChild(optionInput);
};

// Soumettre le formulaire d'édition de sondage
document.getElementById('edit-poll-form').addEventListener('submit', function (event) {
event.preventDefault();

// Récupérer les données du formulaire
const question = document.getElementById('poll-question').value;
const options = [];
document.querySelectorAll('#options-container input').forEach(input => {
if (input.value.trim() !== "") {
options.push({contenu: input.value.trim()});
}
});

// Préparer les données à envoyer
const pollData = {
question: question,
choix: options
};

// ID du sondage à modifier
const pollId = document.getElementById('edit-poll-form').action.split('/').pop();

// Envoyer la requête POST avec les données JSON
fetch (`/sondage/api/poll/${pollId}`, {
method: 'POST',
headers: {
'Content-Type': 'application/json'
},
body: JSON.stringify(pollData)
}).then(response => response.json()).then(data => {
if (data.status === 'success') {
alert('Poll updated successfully!');
location.reload(); // Recharge la page ou ferme le modal
} else {
alert('Error: ' + data.message);
}
}).catch(error => {
console.error('Error:', error);
});
});
});
	</script>

{% endblock %}