{% extends 'base.html.twig' %}

{% block title %}{% endblock %}

{% block body %}
   <main>

    <!-- Breadcrumb Area Start -->
    <section class="breadcrumb__area include-bg pt-150 pb-150 breadcrumb__overlay" data-background="{{ asset('front_assets/img/breadcrumb/poll.jpg') }}">
        <div class="container">
            <div class="row">
                <div class="col-xxl-12">
                    <div class="breadcrumb__content text-center p-relative z-index-1">
                        <h3 class="breadcrumb__title">Our Polls</h3>
                        <div class="breadcrumb__list">
                            <span><a href="index.html">Home</a></span>
                            <span class="dvdr"><i class="fa-regular fa-angle-right"></i></span>
                            <span>Polls</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <!-- Breadcrumb Area End -->

    <!-- Blog Area Start -->
    <section class="blog__area pt-120 pb-120">
    <div class="container">
        <div class="row">
            <!-- Polls Section -->
            <div class="col-xxl-8 col-xl-8 col-lg-8">
                <div class="postbox__wrapper postbox__details pr-20">
                    <div class="postbox__item transition-3 mb-70">
                        <div class="postbox__content">
                            {% for sondage in sondages %}
                            <div class="poll-container" data-sondage-id="{{ sondage.id }}">
                                <div class="user-info">
                                        <img src="{{ asset('front_assets/img/blog/comments/user.png') }}" alt="User">
                                        <b>{{ sondage.user.nom }} {{ sondage.user.prenom }}</b> |
                                        <span>{{ sondage.createdAt|date('d M Y') }}</span>
                                    </div>
                                    <div class="poll-title">{{ sondage.question }}</div>

                                      <!-- Formulaire de vote -->
                                    <form action="{{ path('submit_vote', {'sondageId': sondage.id}) }}" method="POST" class="poll-vote-form">
                                        {% for choix in sondage.choix %}
                                        <div class="poll-option option-{{ loop.index }}">
                                            <input type="radio" name="choix" id="option-{{ loop.index }}" value="{{ choix.id }}" class="poll-option-radio">
                                            <label for="option-{{ loop.index }}">{{ choix.contenu }}</label>
                                            <div class="progress-bar">
                                                <div class="progress"></div>
                                            </div>
                                        </div>
                                        {% endfor %}
                                        <button type="submit" class="vote-btn">Submit Vote</button>
                                    </form>
                               <form action="{{ path('app_reponse_supprimer', {'id': sondage.id}) }}" method="POST" class="remove-vote-form">
                                    <!-- Utiliser un champ caché pour simuler la méthode DELETE -->
                                    <input type="hidden" name="_method" value="DELETE">
                                    <button type="submit" class="remove-vote-btn">Remove Vote</button>
                                </form>

                          

                                <!-- Comments Section -->
                              <div class="latest-comment mb-3">
                                  <!-- Rendre le h3 cliquable avec un style pointer -->
                                  <h3 class="openModal" style="cursor: pointer;" data-sondage-id="{{ sondage.id }}">
                                       {{ sondage.commentaires|length }} Comments
                                  </h3>
                                  <style>
                                    .openModal {
                                       font-size: 14px !important;  /* Taille de police plus petite avec priorité */
                                       font-weight: normal !important;  /* Enlever le gras avec priorité */
                                       color: #555 !important;  /* Couleur plus douce avec priorité */
                                       margin: 0 !important;  /* Enlever la marge si nécessaire avec priorité */
                                               }                                  
                                  </style>
                                  <!-- Modal -->
                                 <div class="modal fade" id="commentsModal{{ sondage.id }}" tabindex="-1" aria-labelledby="commentsModalLabel{{ sondage.id }}" aria-hidden="true">
                                    <div class="modal-dialog modal-lg" role="document">
                                      <div class="modal-content">
                                        <div class="modal-header">
                                          <h5 class="modal-title" id="commentsModalLabel{{ sondage.id }}">All Comments</h5>
                                          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                        </div>
                                        <div class="modal-body">
                                          <div class="comments-list">
                                            {% for commentaire in sondage.commentaires %}
                                             <div class="comment-box" id="comment-{{ commentaire.id }}">
                                                <div class="comment-info d-flex">
                                                      <div class="comment-avatar mr-20">
                                                         <img src="{{ asset('front_assets/img/blog/comments/user.png') }}" alt="">
                                                      </div>
                                                      <div class="avatar-name">
                                                         <h5>{{ commentaire.user.nom }} {{ commentaire.user.prenom }}</h5>
                                                         <span class="post-meta">{{ commentaire.dateComment|date('d M Y') }}</span>
                                                      </div>
                                                </div>
                                                <div class="comment-text">
                                                      <p>{{ commentaire.contenuComment }}</p>
                                                </div>

                                                
                                                      <div class="comment-actions">
                                                         <!-- Edit Button -->
                                                       <form action="{{ path('edit_comment', {'id': commentaire.id}) }}" method="POST">
                                                            <input type="hidden" name="_method" value="PUT"> <!-- Cela simule une requête PUT -->
                                                            <textarea name="content" placeholder="Edit your comment">{{ commentaire.contenuComment }}</textarea>
                                                            <button type="submit">Update Comment</button>
                                                       </form>


                                                         
                                                         <!-- Delete Button -->
                                                         <form action="{{ path('delete_comment', {'id': commentaire.id}) }}" method="POST" onsubmit="return confirm('Are you sure you want to delete this comment?');">
                                                               <input type="hidden" name="_method" value="DELETE">
                                                               <button type="submit" class="btn btn-danger">Delete</button>
                                                         </form>                                                  

                                                      </div>
                                                         <p>Aucun utilisateur connecté</p>
                                             </div>
                                          {% else %}
                                             <p>No comments yet.</p>
                                             {% endfor %}                                          

                                          </div>
                                        </div>
                                        <div class="modal-footer">
                                          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                </div>


                                <!-- Comment Form -->
                                <div class="postbox__comment">
                                    <h3>Write a comment</h3>
                                    <form id="comment-form-{{ sondage.id }}" data-sondage-id="{{ sondage.id }}">
                                        <div class="row">
                                            <div class="col-xxl-12">
                                                <div class="postbox__comment-input">
                                                    <textarea placeholder="Enter your comment ..." class="comment-textarea"></textarea>
                                                </div>
                                            </div>
                                            <div class="col-xxl-12">
                                                <div class="postbox__comment-btn">
                                                    <button type="submit" class="tp-btn">Post Comment</button>
                                                </div>
                                            </div>
                                        </div>
                                    </form>
                                    <br>
                                </div>
                            </div>
                            {% endfor %}
                        </div>
                    </div>
                </div>
            </div>

            <!-- Sidebar Section -->
             <!-- Sidebar Section -->
            <div class="col-xxl-4 col-xl-4 col-lg-4">
                <div class="blog__sidebar pl-70">
                    <form id="poll-form" method="POST" action="{{ path('api_poll_new') }}">
                        <div class="poll-creation-container">
                            <h2>Create a Poll</h2>
                            <input type="text" class="input-box" placeholder="Type your question here" name="question">
                            <h2>Options</h2>
                            <div id="options-container">
                                <input type="text" class="input-box" placeholder="Option 1" name="choix[0][contenu]">
                                <input type="text" class="input-box" placeholder="Option 2" name="choix[1][contenu]">
                            </div>
                            <button type="button" class="add-option" onclick="addOption()">+ Add option</button>
                            <div class="admin-message">
                                <p><strong>Note:</strong> Ensure the question and options follow club rules.</p>
                            </div>
                            <button type="submit" class="create-btn">Create Poll</button>
                        </div>
                    </form>
<button class="button" onclick="window.location.href='{{ path('api_user_polls') }}';">View all polls</button>
                </div>
            </div>
        </div>
    </div>
</section>

<script>


document.addEventListener('DOMContentLoaded', function() {
    // Handle vote removal
    document.querySelectorAll('.remove-vote-form').forEach(form => {
        form.addEventListener('submit', function(event) {
            event.preventDefault();
            
            const sondageId = form.closest('.poll-container').dataset.sondageId;
            
            if (confirm('Are you sure you want to remove your vote?')) {
                // Create FormData from the form
                const formData = new FormData(form);
                
                fetch(form.action, {
                    method: 'POST',
                    body: formData
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok: ' + response.statusText);
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.status === 'success') {
                        // Update UI - reset the form and the progress bars
                        const container = form.closest('.poll-container');
                        const voteForm = container.querySelector('.poll-vote-form');
                        
                        // Reset radio buttons
                        voteForm.querySelectorAll('input[type="radio"]').forEach(radio => {
                            radio.checked = false;
                        });
                        
                        // Reset progress bars
                        container.querySelectorAll('.progress').forEach(progress => {
                            progress.style.width = '0%';
                        });
                        
                        // Optional: Add success message
                        showMessage(container, 'Vote removed successfully!', 'success');
                    } else {
                        // Show error message
                        showMessage(form.closest('.poll-container'), 'Error: ' + data.message, 'error');
                    }
                })
                .catch(error => {
                    console.error('Error removing vote:', error);
                    showMessage(form.closest('.poll-container'), 'An error occurred while removing your vote: ' + error.message, 'error');
                });
            }
        });
    });
    
    // Helper function to show messages
    function showMessage(container, message, type) {
        // Check if message element already exists
        let messageEl = container.querySelector('.message');
        if (!messageEl) {
            messageEl = document.createElement('div');
            messageEl.className = 'message';
            container.insertBefore(messageEl, container.querySelector('.remove-vote-form'));
        }
        
        // Set message content and styling
        messageEl.textContent = message;
        messageEl.className = 'message ' + type;
        
        // Auto-hide after a few seconds
        setTimeout(() => {
            messageEl.style.display = 'none';
        }, 3000);
    }
    
    // Optional: Add CSS for messages
    const style = document.createElement('style');
    style.textContent = `
        .message {
            padding: 10px;
            margin: 10px 0;
            border-radius: 4px;
        }
        .message.success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        .message.error {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
    `;
    document.head.appendChild(style);
});

// Script pour la création de sondage
document.addEventListener("DOMContentLoaded", function() {
    const pollForm = document.getElementById('poll-form');
    
    // Fonction pour ajouter une nouvelle option
    window.addOption = function() {
        const container = document.getElementById('options-container');
        const optionCount = container.children.length;
        const newInput = document.createElement('input');
        newInput.type = 'text';
        newInput.className = 'input-box';
        newInput.placeholder = `Option ${optionCount + 1}`;
        newInput.name = `choix[${optionCount}][contenu]`;
        newInput.required = true;
        container.appendChild(newInput);
    };

    // Gestion de la soumission du formulaire de création de sondage
    if (pollForm) {
        pollForm.addEventListener('submit', function(e) {
            e.preventDefault();

            // Validation basique
            const question = document.querySelector('input[name="question"]').value;
            if (!question.trim()) {
                alert('Please enter a question');
                return;
            }

            // Récupérer toutes les options
            const choixInputs = document.querySelectorAll('#options-container input');
            const choix = Array.from(choixInputs).map(input => ({
                contenu: input.value.trim()
            })).filter(option => option.contenu !== '');

            if (choix.length < 2) {
                alert('Please enter at least 2 options');
                return;
            }

            // Créer l'objet de données
            const data = {
                question: question,
                choix: choix
            };

            // Envoyer la requête
            fetch('/sondage/api/poll/new', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    // Afficher le message de succès
                    alert(data.message);
                    
                    // Réinitialiser le formulaire
                    pollForm.reset();
                    const optionsContainer = document.getElementById('options-container');
                    optionsContainer.innerHTML = `
                        <input type="text" class="input-box" placeholder="Option 1" name="choix[0][contenu]" required>
                        <input type="text" class="input-box" placeholder="Option 2" name="choix[1][contenu]" required>
                    `;

                    // Recharger la page après un court délai
                    setTimeout(() => {
                        window.location.reload();
                    }, 1000);
                } else {
                    alert('Error: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while creating the poll');
            });
        });
    }
});


    // Écoutez le submit du formulaire de vote
    document.querySelectorAll('.poll-vote-form').forEach(function (form) {
        form.addEventListener('submit', function (e) {
            e.preventDefault();  // Empêche le formulaire de se soumettre de manière classique

            const formData = new FormData(form);  // Récupère les données du formulaire
            const sondageId = form.closest('.poll-container').getAttribute('data-sondage-id');
            const choixId = formData.get('choix');  // Récupère l'ID du choix sélectionné

            // Vérifier qu'un choix est sélectionné
            if (!choixId) {
                alert('You should select an option!!');
                return;
            }

            // Faire la requête AJAX
            fetch('{{ path("app_reponse_ajouter", {id: "SONDAGE_ID"}) }}'.replace('SONDAGE_ID', sondageId), {
                method: 'POST',
                body: new URLSearchParams({
                    'choixSondage': choixId,
                }),
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                }
            })
            .then(response => response.json())
            .then(data => {
                // Traitement de la réponse du serveur
                if (data.status === 'success') {
                    alert(data.message);
                    // Vous pouvez mettre à jour la page ou afficher un message de confirmation ici.
                } else {
                    alert(data.message);
                }
            })
            .catch(error => {
                console.error('Erreur:', error);
                alert('Une erreur est survenue.');
            });
        });
    });


       
   document.addEventListener("DOMContentLoaded", function() {
    // Cibler tous les h3 avec la classe .openModal
    const openModalButtons = document.querySelectorAll('.openModal');

    openModalButtons.forEach(button => {
        button.addEventListener('click', function(event) {
            const sondageId = this.getAttribute("data-sondage-id");

            // Vérifier si l'ID du sondage existe
            if (sondageId) {
                // Trouver le modal correspondant à cet ID
                const modal = new bootstrap.Modal(document.getElementById('commentsModal' + sondageId));
                modal.show();
            }
        });
    });
});


               document.addEventListener("DOMContentLoaded", function () {
            // Select all poll containers
            const pollContainers = document.querySelectorAll('.poll-container');

            pollContainers.forEach(pollContainer => {
               const sondageId = pollContainer.getAttribute('data-sondage-id');
               
               // Fetch comments for the specific poll
               fetch(`/commentaire/comment/list/${sondageId}`)
                     .then(response => response.json())
                     .then(data => {
                        const commentList = document.getElementById(`comment-list-${sondageId}`);
                        commentList.innerHTML = ''; // Clear any existing comments

                        // If there are comments, append them to the list
                        if (data.length > 0) {
                           data.forEach(comment => {
                                 const li = document.createElement('li');
                                 li.innerHTML = `
                                    <div class="comments-box grey-bg-2">
                                       <div class="comments-info d-flex">
                                             <div class="comments-avatar mr-20">
                                                <img src="front_assets/img/blog/comments/user.png" alt="">
                                             </div>
                                             <div class="avatar-name">
                                                <h5>${comment.user}</h5>
                                                <span class="post-meta">${comment.date}</span>
                                             </div>
                                             <div class="comments-replay">
                                                <a href="#">delete</a>
                                             </div>
                                       </div>
                                       <div class="comments-text ml-65">
                                             <p>${comment.content}</p>
                                       </div>
                                    </div>
                                 `;
                                 commentList.appendChild(li);
                           });
                        } else {
                           // If no comments, display a message
                           commentList.innerHTML = '<li>No comments yet.</li>';
                        }
                     })
                     .catch(error => console.error('Error fetching comments:', error));
            });
               });
              document.addEventListener("DOMContentLoaded", function () {
    // Sélectionner tous les formulaires de commentaires
    document.querySelectorAll("form[id^='comment-form-']").forEach(form => {
        form.addEventListener("submit", function (event) {
            event.preventDefault(); // Empêcher le rechargement de la page

            let sondageId = this.getAttribute("data-sondage-id");
            let commentText = this.querySelector(".comment-textarea").value.trim();

            if (!commentText) {
                alert("Comment can't be empty.");
                return;
            }

            // Envoyer la requête au serveur
            fetch(`/commentaire/comment/add/${sondageId}`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ contenuComment: commentText })
            })
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    alert(data.error);
                } else {
                    alert(data.message);
                    this.querySelector(".comment-textarea").value = ""; // Vider le champ

                    // Recharger la liste des commentaires après l'ajout
                    loadComments(sondageId);
                }
            })
            .catch(error => console.error("Erreur lors de l'ajout du commentaire:", error));
        });
    });
});


// Fonction pour rafraîchir les commentaires après ajout
function loadComments(sondageId) {
    fetch(`/commentaire/comment/list/${sondageId}`)
    .then(response => response.json())
    .then(data => {
        const commentList = document.querySelector(`#commentsModal${sondageId} .comments-list`);
        
        if (!commentList) {
            console.error(`La liste de commentaires n'a pas été trouvée pour le sondage ${sondageId}`);
            return;
        }

        commentList.innerHTML = ""; // Vider la liste actuelle

        if (data.length > 0) {
            data.forEach(comment => {
                const commentBox = document.createElement("div");
                commentBox.classList.add("comment-box");
                commentBox.innerHTML = `
                    <div class="comment-info d-flex">
                        <div class="comment-avatar mr-20">
                            <img src="front_assets/img/blog/comments/user.png" alt="">
                        </div>
                        <div class="avatar-name">
                            <h5>${comment.user}</h5>
                            <span class="post-meta">${comment.date}</span>
                        </div>
                    </div>
                    <div class="comment-text">
                        <p>${comment.content}</p>
                    </div>
                `;
                commentList.appendChild(commentBox);
            });
        } else {
            commentList.innerHTML = "<p>Aucun commentaire pour l'instant.</p>";
        }
    })
    .catch(error => console.error("Erreur lors du chargement des commentaires:", error));
}



</script>
<!-- jQuery et Bootstrap JS -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>

    <!-- Blog Area End -->
</main>

{% endblock %}