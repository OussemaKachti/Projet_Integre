{% extends 'baseAdmin.html.twig' %}
{% block title %}Admin's Dashboard{% endblock %}
{% block body %}
<main>
    <div class="container-fluid">
        <div class="row">
            <div class="col-12">
                <h4 class="page-title mb-3">Admin's Dashboard</h4>
                
                <!-- Stats Cards Row -->
                <div class="row mb-4">
                    <!-- Total Users Card -->
                    <div class="col-xl-3 col-md-6 mb-4">
                        <div class="card border-left-primary shadow h-100 py-2">
                            <div class="card-body">
                                <div class="row no-gutters align-items-center">
                                    <div class="col mr-2">
                                        <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">Total Users</div>
                                        <div class="h5 mb-0 font-weight-bold text-gray-800">{{ total_user_count|default(pagination.getTotalItemCount()) }}</div>
                                    </div>
                                    <div class="col-auto">
                                        <i class="mdi mdi-account-multiple fa-2x text-gray-300"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Active Users Card -->
                    <div class="col-xl-3 col-md-6 mb-4">
                        <div class="card border-left-success shadow h-100 py-2">
                            <div class="card-body">
                                <div class="row no-gutters align-items-center">
                                    <div class="col mr-2">
                                        <div class="text-xs font-weight-bold text-success text-uppercase mb-1">Active Users</div>
                                        <div class="h5 mb-0 font-weight-bold text-gray-800">{{ active_users_count|default(0) }}</div>
                                    </div>
                                    <div class="col-auto">
                                        <i class="mdi mdi-account-check fa-2x text-gray-300"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Users With Warnings Card -->
                    <div class="col-xl-3 col-md-6 mb-4">
                        <div class="card border-left-warning shadow h-100 py-2">
                            <div class="card-body">
                                <div class="row no-gutters align-items-center">
                                    <div class="col mr-2">
                                        <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">Users With Warnings</div>
                                        <div class="h5 mb-0 font-weight-bold text-gray-800">{{ warned_users_count|default(0) }}</div>
                                    </div>
                                    <div class="col-auto">
                                        <i class="mdi mdi-alert-circle fa-2x text-gray-300"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Disabled Accounts Card -->
                    <div class="col-xl-3 col-md-6 mb-4">
                        <div class="card border-left-danger shadow h-100 py-2">
                            <div class="card-body">
                                <div class="row no-gutters align-items-center">
                                    <div class="col mr-2">
                                        <div class="text-xs font-weight-bold text-danger text-uppercase mb-1">Disabled Accounts</div>
                                        <div class="h5 mb-0 font-weight-bold text-gray-800">{{ disabled_users_count|default(0) }}</div>
                                    </div>
                                    <div class="col-auto">
                                        <i class="mdi mdi-account-cancel fa-2x text-gray-300"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- User Management Table -->
                <div class="card mb-4">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center mb-4">
                            <h4 class="card-title mb-0">User Management</h4>
                            
                            <!-- Export Button -->
                            <a href="{{ path('app_admin_export_users', app.request.query.all|default({})) }}" class="btn btn-outline-primary">
                                <i class="mdi mdi-file-export"></i> Export Users
                            </a>
                        </div>
                        
                        {% for message in app.flashes('success') %}
                            <div class="alert alert-success">
                                {{ message }}
                            </div>
                        {% endfor %}

                        {% for message in app.flashes('warning') %}
                            <div class="alert alert-warning">
                                {{ message }}
                            </div>
                        {% endfor %}

                        {% for message in app.flashes('error') %}
                            <div class="alert alert-danger">
                                {{ message }}
                            </div>
                        {% endfor %}

                        <p class="card-description mb-4">List of users</p>

                        <!-- Search Component (Collapsed by default) -->
                        <div class="card mb-4">
                          <div class="card-header d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">Search Users</h5>
                            <button class="btn btn-sm btn-outline-secondary" type="button" data-bs-toggle="collapse" data-bs-target="#advancedSearchCollapse">
                              <i class="mdi mdi-chevron-down"></i>
                            </button>
                          </div>
                          <div class="collapse" id="advancedSearchCollapse">
                            <div class="card-body">
                              <form id="advanced-search-form">
                                <div class="row g-3">
                                  <!-- Basic Search -->
                                  <div class="col-md-12">
                                    <div class="input-group">
                                      <input type="text" id="global-search" class="form-control" placeholder="Search by name, email or phone..." value="{{ searchQuery }}">
                                      <div class="input-group-append">
                                        <button id="search-button" class="btn btn-primary" type="button">
                                          <i class="mdi mdi-magnify"></i>
                                        </button>
                                      </div>
                                    </div>
                                  </div>
                                  
                                  <!-- Search Type -->
                                  <div class="col-md-6">
                                    <label for="search-type" class="form-label">Search Type</label>
                                    <select id="search-type" class="form-select">
                                      <option value="contains" {% if searchType == 'contains' %}selected{% endif %}>Contains</option>
                                      <option value="exact" {% if searchType == 'exact' %}selected{% endif %}>Exact Match</option>
                                      <option value="starts" {% if searchType == 'starts' %}selected{% endif %}>Starts With</option>
                                      <option value="ends" {% if searchType == 'ends' %}selected{% endif %}>Ends With</option>
                                    </select>
                                  </div>
                                  
                                  <!-- Search Field -->
                                  <div class="col-md-6">
                                    <label for="search-field" class="form-label">Search In</label>
                                    <select id="search-field" class="form-select">
                                      <option value="all" {% if searchField == 'all' %}selected{% endif %}>All Fields</option>
                                      <option value="name" {% if searchField == 'name' %}selected{% endif %}>Name</option>
                                      <option value="email" {% if searchField == 'email' %}selected{% endif %}>Email</option>
                                      <option value="phone" {% if searchField == 'phone' %}selected{% endif %}>Phone</option>
                                    </select>
                                  </div>
                                  
                                  <!-- Date Range - Show only if createdAt field exists -->
                                  {% if field_exists is defined and field_exists.createdAt %}
                                  <div class="col-md-6">
                                    <label for="date-range" class="form-label">Registration Date</label>
                                    <select id="date-range" class="form-select">
                                      <option value="">Any Time</option>
                                      <option value="today" {% if dateRange == 'today' %}selected{% endif %}>Today</option>
                                      <option value="week" {% if dateRange == 'week' %}selected{% endif %}>This Week</option>
                                      <option value="month" {% if dateRange == 'month' %}selected{% endif %}>This Month</option>
                                      <option value="custom" {% if dateRange == 'custom' %}selected{% endif %}>Custom Range</option>
                                    </select>
                                  </div>
                                  
                                  <!-- Custom Date Range (shown only if dateRange = 'custom') -->
                                  <div class="col-md-6 date-range-custom" {% if dateRange != 'custom' %}style="display: none;"{% endif %}>
                                    <div class="row">
                                      <div class="col-md-6">
                                        <label for="date-from" class="form-label">From</label>
                                        <input type="date" id="date-from" class="form-control" value="{{ dateFrom }}">
                                      </div>
                                      <div class="col-md-6">
                                        <label for="date-to" class="form-label">To</label>
                                        <input type="date" id="date-to" class="form-control" value="{{ dateTo }}">
                                      </div>
                                    </div>
                                  </div>
                                  {% endif %}
                                  
                                  <div class="col-12 d-flex justify-content-end mt-3">
                                    <button type="button" id="clear-search" class="btn btn-outline-secondary me-2">Clear</button>
                                    <button type="submit" class="btn btn-primary">Search</button>
                                  </div>
                                </div>
                              </form>
                            </div>
                          </div>
                        </div>
                        
                        <!-- Filters Component (Collapsed by default) -->
                        <div class="card mb-4">
                          <div class="card-header d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">Filters</h5>
                            <div>
                              <span id="filter-count" class="badge bg-primary me-2" style="display: none;">0</span>
                              <button class="btn btn-sm btn-outline-secondary" type="button" data-bs-toggle="collapse" data-bs-target="#filtersCollapse">
                                <i class="mdi mdi-filter-outline"></i>
                              </button>
                            </div>
                          </div>
                          <div class="collapse" id="filtersCollapse">
                            <div class="card-body">
                              <div class="row g-3">
                                <!-- Roles with multi-select -->
                                <div class="col-md-4">
                                  <label for="role-filter" class="form-label">Roles</label>
                                  <select id="role-filter" class="form-select">
                                    <option value="">All Roles</option>
                                    {% for role in availableRoles %}
                                      <option value="{{ role }}" {% if roleFilter == role %} selected {% endif %}>{{ role }}</option>
                                    {% endfor %}
                                  </select>
                                </div>
                                
                                <!-- Status with icons -->
                                <div class="col-md-4">
                                  <label for="status-filter" class="form-label">Status</label>
                                  <select id="status-filter" class="form-select">
                                    <option value="">All Statuses</option>
                                    <option value="active" {% if statusFilter == 'active' %} selected {% endif %}>
                                      Active
                                    </option>
                                    <option value="disabled" {% if statusFilter == 'disabled' %} selected {% endif %}>
                                      Disabled
                                    </option>
                                  </select>
                                </div>
                                
                                <!-- Verification -->
                                <div class="col-md-4">
                                  <label for="verification-filter" class="form-label">Verification</label>
                                  <select id="verification-filter" class="form-select">
                                    <option value="">All Verification</option>
                                    <option value="verified" {% if verificationFilter == 'verified' %} selected {% endif %}>Verified</option>
                                    <option value="not-verified" {% if verificationFilter == 'not-verified' %} selected {% endif %}>Not Verified</option>
                                  </select>
                                </div>
                                
                                <!-- Activity Filter - Show only if lastLoginAt field exists -->
                                {% if field_exists is defined and field_exists.lastLoginAt %}
                                <div class="col-md-4">
                                  <label for="activity-filter" class="form-label">Last Activity</label>
                                  <select id="activity-filter" class="form-select">
                                    <option value="">Any Time</option>
                                    <option value="today" {% if activityFilter == 'today' %}selected{% endif %}>Today</option>
                                    <option value="week" {% if activityFilter == 'week' %}selected{% endif %}>This Week</option>
                                    <option value="month" {% if activityFilter == 'month' %}selected{% endif %}>This Month</option>
                                    <option value="inactive" {% if activityFilter == 'inactive' %}selected{% endif %}>Inactive (30+ days)</option>
                                  </select>
                                </div>
                                {% endif %}
                                
                                <!-- Warning Level Filter -->
                                {% if field_exists is defined and field_exists.warningCount %}
                                <div class="col-md-4">
                                    <label for="warning-filter" class="form-label">Warning Level</label>
                                    <select id="warning-filter" class="form-select">
                                        <option value="">All Users</option>
                                        <option value="0" {% if warningFilter == '0' %}selected{% endif %}>No Warnings</option>
                                        <option value="1" {% if warningFilter == '1' %}selected{% endif %}>1 Warning</option>
                                        <option value="2" {% if warningFilter == '2' %}selected{% endif %}>2 Warnings</option>
                                        <option value="3" {% if warningFilter == '3' %}selected{% endif %}>3+ Warnings</option>
                                    </select>
                                </div>
                                {% endif %}
                                
                                <div class="col-12 d-flex justify-content-end mt-3">
                                  <button type="button" id="clear-filters" class="btn btn-outline-secondary me-2">Clear Filters</button>
                                  <button type="button" id="apply-filters" class="btn btn-primary">Apply Filters</button>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>

                        <!-- Loading Indicator -->
                        <div id="loading-indicator" class="text-center mb-3" style="display: none;">
                            <div class="spinner-border text-primary" role="status">
                                <span class="sr-only">Loading...</span>
                            </div>
                        </div>
                        
                        <!-- Active Filters Display -->
                        <div id="active-filters" class="mb-3">
                            {% if searchQuery or roleFilter or statusFilter or verificationFilter or dateRange or activityFilter or warningFilter %}
                                <div class="d-flex flex-wrap gap-2 align-items-center">
                                    <span class="text-muted">Active filters:</span>
                                    
                                    {% if searchQuery %}
                                        <span class="badge bg-primary">Search: {{ searchQuery }}</span>
                                    {% endif %}
                                    
                                    {% if roleFilter %}
                                        <span class="badge bg-info">Role: {{ roleFilter }}</span>
                                    {% endif %}
                                    
                                    {% if statusFilter %}
                                        <span class="badge bg-secondary">Status: {{ statusFilter }}</span>
                                    {% endif %}
                                    
                                    {% if verificationFilter %}
                                        <span class="badge bg-warning text-dark">Verification: {{ verificationFilter }}</span>
                                    {% endif %}
                                    
                                    {% if dateRange %}
                                        <span class="badge bg-success">Date: {{ dateRange }}</span>
                                    {% endif %}
                                    
                                    {% if activityFilter %}
                                        <span class="badge bg-danger">Activity: {{ activityFilter }}</span>
                                    {% endif %}
                                    
                                    {% if warningFilter %}
                                        <span class="badge bg-warning">Warnings: {{ warningFilter }}</span>
                                    {% endif %}
                                    
                                    <a href="{{ path('app_admin_dashboard') }}" class="btn btn-sm btn-outline-secondary">
                                        <i class="mdi mdi-close"></i> Clear All Filters
                                    </a>
                                </div>
                            {% endif %}
                        </div>

                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Email</th>
                                        <th>Phone Number</th>
                                        <th>Role</th>
                                        <th>Verification</th>
                                        <th>Status</th>
                                        <th>Warnings</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="user-table-body">
                                    {% include '_table_body.html.twig' with {'pagination': pagination} %}
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
                
                <!-- Pagination Controls -->
                <div class="d-flex justify-content-center pagination-container mb-4">
                    {% if pagination.pageCount > 0 %}
                        {{ knp_pagination_render(pagination, 'custom_template.html.twig', {}, {
                            'q': app.request.query.get('q'),
                            'role': app.request.query.get('role'),
                            'status': app.request.query.get('status'),
                            'verification': app.request.query.get('verification'),
                            'searchType': app.request.query.get('searchType'),
                            'searchField': app.request.query.get('searchField'),
                            'dateRange': app.request.query.get('dateRange'),
                            'dateFrom': app.request.query.get('dateFrom'),
                            'dateTo': app.request.query.get('dateTo'),
                            'activity': app.request.query.get('activity'),
                            'warning': app.request.query.get('warning')
                        }) }}
                    {% endif %}
                </div>
                
                <!-- Analytics Charts Row - MOVED BELOW THE TABLE -->
                <h4 class="page-title mb-3">Dashboard Analytics</h4>
                
                <div class="row mb-4">
                    <!-- User Registrations Chart -->
                    <div class="col-xl-8 col-lg-7 mb-4">
                        <div class="card shadow h-100">
                            <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                                <h6 class="m-0 font-weight-bold text-primary">User Registrations (Last 30 Days)</h6>
                            </div>
                            <div class="card-body">
                                <div class="chart-area">
                                    <canvas id="registrationsChart" height="300"></canvas>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Role Distribution Chart -->
                    <div class="col-xl-4 col-lg-5 mb-4">
                        <div class="card shadow h-100">
                            <div class="card-header py-3">
                                <h6 class="m-0 font-weight-bold text-primary">User Role Distribution</h6>
                            </div>
                            <div class="card-body">
                                <div class="chart-pie pt-4 pb-2">
                                    <canvas id="roleDistributionChart"></canvas>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Second Analytics Row -->
                <div class="row mb-4">
                    <!-- Warning Distribution Chart -->
                    <div class="col-xl-6 col-lg-6 mb-4">
                        <div class="card shadow h-100">
                            <div class="card-header py-3">
                                <h6 class="m-0 font-weight-bold text-primary">Warning Distribution</h6>
                            </div>
                            <div class="card-body">
                                <div class="chart-pie pt-4 pb-2">
                                    <canvas id="warningDistributionChart"></canvas>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Recent Warnings List -->
                    <div class="col-xl-6 col-lg-6 mb-4">
                        <div class="card shadow h-100">
                            <div class="card-header py-3">
                                <h6 class="m-0 font-weight-bold text-primary">Recent Content Warnings</h6>
                            </div>
                            <div class="card-body">
                                {% if recent_warnings|default(false) %}
                                    <div class="list-group">
                                        {% for warning in recent_warnings %}
                                            <div class="list-group-item">
                                                <div class="d-flex w-100 justify-content-between">
                                                    <h6 class="mb-1">{{ warning.user.prenom }} {{ warning.user.nom }}</h6>
                                                    <small>Warning #{{ warning.count }}</small>
                                                </div>
                                                <p class="mb-1 small">{{ warning.content_type }}</p>
                                            </div>
                                        {% endfor %}
                                    </div>
                                {% else %}
                                    <div class="text-center text-muted py-4">
                                        <i class="mdi mdi-check-circle-outline" style="font-size: 3rem;"></i>
                                        <p class="mt-2">No recent content warnings</p>
                                    </div>
                                {% endif %}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</main>

<!-- Modal templates (inline) -->
<!-- User Details Modal -->
<div class="modal fade" id="userDetailsModal" tabindex="-1" aria-labelledby="userDetailsModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="userDetailsModalLabel">User Details</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body" id="userDetailsContent">
        <div class="text-center">
          <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteConfirmModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="deleteConfirmModalLabel">Confirm Delete</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        Are you sure you want to delete this user? This action cannot be undone.
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <a href="#" id="confirmDeleteBtn" class="btn btn-danger">Delete</a>
      </div>
    </div>
  </div>
</div>

<style>
    /* Stats card styling */
    .border-left-primary {
        border-left: 4px solid #4e73df;
    }
    .border-left-success {
        border-left: 4px solid #1cc88a;
    }
    .border-left-info {
        border-left: 4px solid #36b9cc;
    }
    .border-left-warning {
        border-left: 4px solid #f6c23e;
    }
    .border-left-danger {
        border-left: 4px solid #e74a3b;
    }
    .card {
        transition: transform 0.2s ease-in-out;
        margin-bottom: 20px;
        border-radius: 0.25rem;
    }
    .card:hover {
        transform: translateY(-5px);
    }
    
    /* Badge styling */
    .badge {
        font-size: 0.8rem;
        padding: 0.35em 0.65em;
    }
    
    /* Improve filter display */
    #active-filters .badge {
        display: inline-flex;
        align-items: center;
    }
    
    /* Gap utility */
    .gap-2 {
        gap: 0.5rem;
    }
    
    /* Chart styles */
    .chart-area, .chart-pie {
        position: relative;
        height: 300px;
        width: 100%;
    }
    
    /* Text utilities */
    .text-xs {
        font-size: 0.7rem;
    }
    .fa-2x {
        color: rgba(0,0,0,0.1);
    }
    
    /* Better action buttons display */
    .action-buttons {
        display: flex;
        flex-wrap: wrap;
        gap: 5px;
        justify-content: center;
    }
    
    /* Ensure forms don't overflow */
    form {
        max-width: 100%;
    }
    
    /* Improve Select elements */
    .form-select {
        width: 100%;
    }
</style>

<script>
// Enhanced AJAX Search and Filter functionality with fixed pagination
document.addEventListener('DOMContentLoaded', function() {
  // Elements
  const searchForm = document.getElementById('advanced-search-form');
  const globalSearch = document.getElementById('global-search');
  const searchType = document.getElementById('search-type');
  const searchField = document.getElementById('search-field');
  const dateRange = document.getElementById('date-range');
  const dateFrom = document.getElementById('date-from');
  const dateTo = document.getElementById('date-to');
  const roleFilter = document.getElementById('role-filter');
  const statusFilter = document.getElementById('status-filter');
  const verificationFilter = document.getElementById('verification-filter');
  const activityFilter = document.getElementById('activity-filter');
  const warningFilter = document.getElementById('warning-filter');
  const tableBody = document.getElementById('user-table-body');
  const loadingIndicator = document.getElementById('loading-indicator');
  const clearSearch = document.getElementById('clear-search');
  const clearFilters = document.getElementById('clear-filters');
  const applyFilters = document.getElementById('apply-filters');
  
  // Initialize variables
  let debounceTimeout;
  let activeFilters = 0;
  
  // Event listeners
  if (searchForm) {
    searchForm.addEventListener('submit', function(e) {
      e.preventDefault();
      fetchResults();
    });
  }
  
  if (globalSearch) {
    globalSearch.addEventListener('input', debounceSearch);
  }
  
  if (dateRange) {
    dateRange.addEventListener('change', function() {
      const customDateFields = document.querySelectorAll('.date-range-custom');
      if (this.value === 'custom') {
        customDateFields.forEach(field => field.style.display = 'block');
      } else {
        customDateFields.forEach(field => field.style.display = 'none');
      }
    });
  }
  
  if (clearSearch) {
    clearSearch.addEventListener('click', clearSearchFields);
  }
  
  if (clearFilters) {
    clearFilters.addEventListener('click', clearFilterFields);
  }
  
  if (applyFilters) {
    applyFilters.addEventListener('click', fetchResults);
  }
  
  // Attach handlers to pagination links on initial load
  attachPaginationHandlers();
  
  // Render charts
  renderCharts();
  
  // Functions
  function debounceSearch() {
    clearTimeout(debounceTimeout);
    debounceTimeout = setTimeout(() => {
      if (globalSearch.value.length >= 2 || globalSearch.value.length === 0) {
        fetchResults();
      }
    }, 400);
  }
  
  function countActiveFilters() {
    activeFilters = 0;
    
    // Check search
    if (globalSearch && globalSearch.value) activeFilters++;
    
    // Check filters
    if (roleFilter && roleFilter.value) activeFilters++;
    if (statusFilter && statusFilter.value) activeFilters++;
    if (verificationFilter && verificationFilter.value) activeFilters++;
    if (dateRange && dateRange.value) activeFilters++;
    if (activityFilter && activityFilter && activityFilter.value) activeFilters++;
    if (warningFilter && warningFilter.value) activeFilters++;
    
    // Update UI
    const filterCount = document.getElementById('filter-count');
    if (filterCount) {
      if (activeFilters > 0) {
        filterCount.textContent = activeFilters;
        filterCount.style.display = 'inline-block';
      } else {
        filterCount.style.display = 'none';
      }
    }
  }
  
  function clearSearchFields() {
    if (globalSearch) globalSearch.value = '';
    if (searchType) searchType.value = 'contains';
    if (searchField) searchField.value = 'all';
    if (dateRange) dateRange.value = '';
    if (dateFrom) dateFrom.value = '';
    if (dateTo) dateTo.value = '';
    
    // Hide custom date range fields
    const customDateFields = document.querySelectorAll('.date-range-custom');
    customDateFields.forEach(field => field.style.display = 'none');
    
    // Update count and fetch results
    countActiveFilters();
    fetchResults();
  }
  
  function clearFilterFields() {
    if (roleFilter) roleFilter.value = '';
    if (statusFilter) statusFilter.value = '';
    if (verificationFilter) verificationFilter.value = '';
    if (activityFilter) activityFilter.value = '';
    if (warningFilter) warningFilter.value = '';
    
    // Update count and fetch results
    countActiveFilters();
    fetchResults();
  }
  
  function fetchResults(page = 1) {
    if (loadingIndicator) {
      loadingIndicator.style.display = 'block';
    }
    
    countActiveFilters();
    
    const params = new URLSearchParams();
    
    // Always include page parameter with default of 1
    params.append('page', page);
    
    // Add search parameters
    if (globalSearch && globalSearch.value.trim() !== '') {
      params.append('q', globalSearch.value.trim());
      
      if (searchType && searchType.value !== 'contains') {
        params.append('searchType', searchType.value);
      }
      
      if (searchField && searchField.value !== 'all') {
        params.append('searchField', searchField.value);
      }
    }
    
    // Add date range parameters
    if (dateRange && dateRange.value) {
      params.append('dateRange', dateRange.value);
      
      if (dateRange.value === 'custom') {
        if (dateFrom && dateFrom.value) {
          params.append('dateFrom', dateFrom.value);
        }
        
        if (dateTo && dateTo.value) {
          params.append('dateTo', dateTo.value);
        }
      }
    }
    
    // Add filter parameters
    if (roleFilter && roleFilter.value !== '') {
      params.append('role', roleFilter.value);
    }
    
    if (statusFilter && statusFilter.value !== '') {
      params.append('status', statusFilter.value);
    }
    
    if (verificationFilter && verificationFilter.value !== '') {
      params.append('verification', verificationFilter.value);
    }
    
    // Add activity filter
    if (activityFilter && activityFilter.value !== '') {
      params.append('activity', activityFilter.value);
    }
    
    // Add warning filter
    if (warningFilter && warningFilter.value !== '') {
      params.append('warning', warningFilter.value);
    }
    
    const url = '/admin?' + params.toString();
    console.log('Fetching:', url);
    
    // Update URL in browser without page reload
    window.history.replaceState(null, '', url);
    
    // Fetch the results via AJAX
    fetch(url, {
      headers: {
        'X-Requested-With': 'XMLHttpRequest'
      }
    })
    .then(response => {
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.text();
    })
    .then(html => {
      if (tableBody) {
        tableBody.innerHTML = html;
      }
      
      if (loadingIndicator) {
        loadingIndicator.style.display = 'none';
      }
      
      // Get updated pagination from server
      const paginationUrl = url + '&pagination_only=1';
      console.log('Fetching pagination:', paginationUrl);
      
      return fetch(paginationUrl, {
        headers: {
          'X-Requested-With': 'XMLHttpRequest'
        }
      });
    })
    .then(response => response.text())
    .then(paginationHtml => {
      // Insert the new pagination HTML
      const paginationContainer = document.querySelector('.pagination-container');
      if (paginationContainer) {
        paginationContainer.innerHTML = paginationHtml;
        console.log('Pagination HTML updated');
        
        // Re-attach handlers to new pagination elements
        attachPaginationHandlers();
      }
    })
    .catch(error => {
      console.error('Error:', error);
      
      if (loadingIndicator) {
        loadingIndicator.style.display = 'none';
      }
      
      if (tableBody) {
        tableBody.innerHTML = '<tr><td colspan="8" class="text-center text-danger">Error loading data: ' + error.message + '</td></tr>';
      }
    });
  }
  
  // Fixed pagination click handler
  function attachPaginationHandlers() {
    const paginationLinks = document.querySelectorAll('.pagination a.page-link');
    
    paginationLinks.forEach(link => {
      // Remove any existing event listeners to avoid duplicates
      const clonedLink = link.cloneNode(true);
      link.parentNode.replaceChild(clonedLink, link);
      
      clonedLink.addEventListener('click', function(e) {
        e.preventDefault();
        
        // Extract page number from href attribute
        try {
          // Get the URL from the href attribute
          const hrefUrl = this.getAttribute('href');
          if (!hrefUrl) throw new Error('No href found');
          
          // Parse the URL to extract the page parameter
          const urlObj = new URL(hrefUrl, window.location.origin);
          const pageParam = urlObj.searchParams.get('page');
          
          // Convert to number and validate
          const pageNumber = parseInt(pageParam);
          if (isNaN(pageNumber) || pageNumber < 1) {
            console.error('Invalid page number:', pageParam);
            return;
          }
          
          console.log('Navigating to page:', pageNumber);
          fetchResults(pageNumber);
        } catch (error) {
          console.error('Error parsing pagination URL:', error);
        }
      });
    });
  }
  
  // Render analytics charts
  function renderCharts() {
    if (typeof Chart === 'undefined') {
      console.warn('Chart.js not loaded. Please include Chart.js for visualization.');
      loadChartJS();
      return;
    }
    
    renderRegistrationsChart();
    renderRoleDistributionChart();
    renderWarningDistributionChart();
  }
  
  // Load Chart.js dynamically if not present
  function loadChartJS() {
    const script = document.createElement('script');
    script.src = 'https://cdn.jsdelivr.net/npm/chart.js';
    script.onload = renderCharts;
    document.head.appendChild(script);
  }
  
  // Render registration trends chart
  function renderRegistrationsChart() {
    const ctx = document.getElementById('registrationsChart');
    if (!ctx) return;
    
    // Sample data - replace with actual data from your backend
    const labels = Array.from({length: 30}, (_, i) => {
      const d = new Date();
      d.setDate(d.getDate() - 29 + i);
      return d.toLocaleDateString('en-US', {month: 'short', day: 'numeric'});
    });
    
    // Generate sample data or use the registration_data from controller if available
    const registrationData = typeof registration_data !== 'undefined' ? 
      registration_data.map(item => item.count) : 
      Array.from({length: 30}, () => Math.floor(Math.random() * 5));
    
    new Chart(ctx, {
      type: 'line',
      data: {
        labels: labels,
        datasets: [{
          label: 'New Registrations',
          backgroundColor: 'rgba(78, 115, 223, 0.05)',
          borderColor: 'rgba(78, 115, 223, 1)',
          pointBackgroundColor: 'rgba(78, 115, 223, 1)',
          pointBorderColor: '#fff',
          pointHoverBackgroundColor: '#fff',
          pointHoverBorderColor: 'rgba(78, 115, 223, 1)',
          data: registrationData,
          tension: 0.4
        }]
      },
      options: {
        maintainAspectRatio: false,
        scales: {
          x: {
            grid: {
              display: false
            }
          },
          y: {
            beginAtZero: true,
            ticks: {
              precision: 0
            }
          }
        },
        plugins: {
          legend: {
            display: false
          }
        }
      }
    });
  }
  
  // Render role distribution pie chart
 // Render role distribution pie chart
function renderRoleDistributionChart() {
  const ctx = document.getElementById('roleDistributionChart');
  if (!ctx) return;
  
  // Check if role_distribution data is available from controller
  if (typeof role_distribution !== 'undefined') {
    // Use real data from controller
    const roleLabels = [];
    const roleCounts = [];
    
    // Map the enum values to more readable labels
    const roleLabelsMap = {
      'nonMembre': 'Non-Member',
      'membre': 'Member',
      'presidentClub': 'Club President',
      'user': 'Regular User'
      // administrateur is excluded as per requirements
    };
    
    // Process the role distribution data
    role_distribution.forEach(item => {
      // Skip administrator role
      if (item.role === 'administrateur') return;
      
      // Use friendly name if available, otherwise use the original
      const roleLabel = roleLabelsMap[item.role] || item.role;
      roleLabels.push(roleLabel);
      roleCounts.push(item.count);
    });
    
    createRoleChart(ctx, roleLabels, roleCounts);
  } else {
    // Use sample data based on RoleEnum
    const roleData = [
      { role: 'Non-Member', count: {{ active_users_count|default(20) * 0.3 }}, color: 'rgba(78, 115, 223, 0.8)' },
      { role: 'Member', count: {{ active_users_count|default(20) * 0.4 }}, color: 'rgba(28, 200, 138, 0.8)' },
      { role: 'Club President', count: {{ active_users_count|default(20) * 0.2 }}, color: 'rgba(54, 185, 204, 0.8)' },
      { role: 'Regular User', count: {{ active_users_count|default(20) * 0.1 }}, color: 'rgba(246, 194, 62, 0.8)' }
    ];
    
    createRoleChart(
      ctx, 
      roleData.map(item => item.role),
      roleData.map(item => item.count),
      roleData.map(item => item.color)
    );
  }
}

// Helper function to create the role chart
function createRoleChart(ctx, labels, data, customColors) {
  const backgroundColors = customColors || [
    'rgba(78, 115, 223, 0.8)',  // Blue
    'rgba(28, 200, 138, 0.8)',  // Green
    'rgba(54, 185, 204, 0.8)',  // Cyan
    'rgba(246, 194, 62, 0.8)',  // Yellow
    'rgba(231, 74, 59, 0.8)'    // Red
  ];
  
  new Chart(ctx, {
    type: 'doughnut',
    data: {
      labels: labels,
      datasets: [{
        data: data,
        backgroundColor: backgroundColors.slice(0, data.length),
        hoverBackgroundColor: backgroundColors.slice(0, data.length).map(color => color.replace('0.8', '1')),
        hoverBorderColor: "rgba(234, 236, 244, 1)",
      }]
    },
    options: {
      maintainAspectRatio: false,
      plugins: {
        legend: {
          position: 'right',
          labels: {
            font: {
              size: 12
            },
            padding: 10
          }
        },
        tooltip: {
          callbacks: {
            label: function(context) {
              const label = context.label || '';
              const value = context.raw || 0;
              const total = context.dataset.data.reduce((a, b) => a + b, 0);
              const percentage = Math.round((value / total) * 100);
              return `${label}: ${value} (${percentage}%)`;
            }
          }
        }
      },
      cutout: '70%'
    }
  });
}
  
  // Render warning distribution chart
  function renderWarningDistributionChart() {
    const ctx = document.getElementById('warningDistributionChart');
    if (!ctx) return;
    
    // Sample warning data - should be replaced with actual data from controller
    const warningData = [
      { label: 'No Warnings', count: {{ (pagination.getTotalItemCount() - warned_users_count|default(0)) }} },
      { label: '1 Warning', count: {{ warned_users_count|default(10) * 0.6 }} },
      { label: '2 Warnings', count: {{ warned_users_count|default(10) * 0.3 }} },
      { label: '3+ Warnings', count: {{ warned_users_count|default(10) * 0.1 }} }
    ];
    
    const backgroundColors = [
      'rgba(28, 200, 138, 0.8)',  // Green - No warnings
      'rgba(246, 194, 62, 0.8)',  // Yellow - 1 warning
      'rgba(255, 159, 64, 0.8)',  // Orange - 2 warnings
      'rgba(231, 74, 59, 0.8)'    // Red - 3+ warnings
    ];
    
    new Chart(ctx, {
      type: 'pie',
      data: {
        labels: warningData.map(item => item.label),
        datasets: [{
          data: warningData.map(item => item.count),
          backgroundColor: backgroundColors,
          hoverBackgroundColor: backgroundColors.map(color => color.replace('0.8', '1')),
          hoverBorderColor: "rgba(234, 236, 244, 1)",
        }]
      },
      options: {
        maintainAspectRatio: false,
        plugins: {
          legend: {
            position: 'right'
          }
        }
      }
    });
  }
});
</script>
{% endblock %}