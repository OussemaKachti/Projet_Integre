{% extends 'baseAdmin.html.twig' %}

{% block title %}Commentaire index
{% endblock %}

{% block body %}
	<div class="main-panel" style="width: 100%; max-width: 1300px; margin: 0 auto 0 20px;">
		<div class="content-wrapper">
			<div class="row">
				<div class="col-lg-12 grid-margin stretch-card">
					<div class="card">
						<div class="card-body">
							<h4 class="card-title">Comments Management</h4>

							<form method="GET" action="{{ path('app_commentaire_index') }}" class="filter-form" id="filterForm">
								<label for="clubFilter">Filter by Club:</label>
								<select id="clubFilter" name="club" class="filter-select">
									<option value="all" {% if selectedClub == 'all' %} selected {% endif %}>All Clubs</option>
									{% for club in clubs %}
										<option value="{{ club }}" {% if selectedClub == club %} selected {% endif %}>{{ club }}</option>
									{% endfor %}
								</select>
							</form>

							<div class="table-responsive">
								<table class="table table-striped table-sm" id="commentTable">
									<thead>
										<tr>
											<th>ID</th>
											<th>User</th>
											<th>Comment</th>
											<th>Club Name</th>
											<th>Created At</th>
											<th>Actions</th>
										</tr>
									</thead>
									<tbody>
										<!-- Les commentaires seront insérés ici par AJAX -->
									</tbody>
								</table>
							</div>


							<style>


								.bin-button {
									display: flex;
									flex-direction: column;
									align-items: center;
									justify-content: center;
									width: 25px;
									height: 25px;
									border-radius: 5px;
									background-color: rgb(255, 95, 95);
									cursor: pointer;
									border: 3px solid rgb(255, 201, 201);
									transition-duration: 0.3s;
								}
								.bin-bottom {
									width: 15px;
								}
								.bin-top {
									width: 17px;
									transform-origin: right;
									transition-duration: 0.3s;
								}
								.bin-button:hover .bin-top {
									transform: rotate(45deg);
								}
								.bin-button:hover {
									background-color: rgb(255, 0, 0);
								}
								.bin-button:active {
									transform: scale(0.9);
								}
							</style>
						</div>
					</div>
				</div>
			</div>
			<!-- Fermeture de la div .row pour les commentaires -->

			<div class="row">
				<div class="col-lg-6 grid-margin stretch-card">
					<div class="card">
						<div class="card-body">
							<h4 class="card-title">Area chart for Responses to polls</h4>
							<canvas id="areaChart"></canvas>
						</div>
					</div>
				</div>
				<div class="col-lg-6 grid-margin stretch-card">
					<div class="card">
						<div class="card-body">
							<h4 class="card-title">Bar chart for Responses to polls</h4>
							<canvas id="barChart"></canvas>
						</div>
					</div>
				</div>
			</div>
		</div>
		<style>
			/* Style du formulaire de filtre */
			.filter-form {
				display: flex;
				justify-content: flex-end;
				margin-bottom: 15px;
			}

			.filter-form label {
				font-weight: bold;
				margin-right: 10px;
				font-size: 14px;
			}

			.filter-select {
				padding: 5px 10px;
				font-size: 14px;
				border-radius: 5px;
				border: 1px solid #ddd;
				cursor: pointer;
			}

			/* Style du bouton poubelle */
			.bin-button {
				display: flex;
				flex-direction: column;
				align-items: center;
				justify-content: center;
				width: 25px;
				height: 25px;
				border-radius: 5px;
				background-color: rgb(255, 95, 95);
				cursor: pointer;
				border: 3px solid rgb(255, 201, 201);
				transition-duration: 0.3s;
			}

			.bin-bottom {
				width: 15px;
			}

			.bin-top {
				width: 17px;
				transform-origin: right;
				transition-duration: 0.3s;
			}

			.bin-button:hover .bin-top {
				transform: rotate(45deg);
			}

			.bin-button:hover {
				background-color: rgb(255, 0, 0);
			}

			.bin-button:active {
				transform: scale(0.9);
			}
		</style>
	</div>
</div></div><script>
document.addEventListener("DOMContentLoaded", function () {
    const tableBody = document.getElementById('commentaireTableBody');  // Le corps du tableau des commentaires
    let debounceTimer;

    function attachHoverEventListeners() {
        // Sélectionner tous les noms de clubs
        document.querySelectorAll(".club-name").forEach(clubElement => {
            clubElement.addEventListener("mouseover", function () {
                const clubName = this.innerText;  // Récupérer le nom du club depuis l'élément survolé
                console.log("Hovering over club:", clubName);  // Log pour vérifier le survol

                if (!clubName) {
                    console.error("Nom du club non trouvé !");
                    showToast("Erreur : Nom du club introuvable.", "danger");
                    return;
                }

                // Filtrer les commentaires en fonction du club survolé
                updateCommentsByClub(clubName);
            });
        });
    }

    function updateCommentsByClub(clubName) {
        fetch(`/commentaire/filterByClub?club=${encodeURIComponent(clubName)}`, {
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        }).then(response => response.json()).then(data => {
            tableBody.innerHTML = ''; // Vider le tableau des commentaires

            // Ajouter les nouveaux résultats filtrés
            data.commentaires.forEach(commentaire => {
                const row = `
                    <tr>
                        <td>${commentaire.id}</td>
                        <td>${commentaire.user}</td>
                        <td>${commentaire.contenu}</td>
                        <td>${commentaire.club_name}</td>
                        <td>${commentaire.created_at}</td>
                    </tr>
                `;
                tableBody.insertAdjacentHTML('beforeend', row);
            });
        }).catch(error => console.error('Erreur:', error));
    }

    // Charger tous les commentaires au début
    updateCommentsByClub('');  // Vous pouvez mettre une valeur par défaut pour charger tous les commentaires au départ

    // Réattacher les événements de survol après le chargement initial
    attachHoverEventListeners();
});

// Fonction pour afficher un toast
function showToast(message, type = "success") {
    const toastContainer = document.getElementById("toastContainer");
    const toast = document.createElement("div");

    toast.className = `toast align-items-center text-white bg-${type} border-0 show`;
    toast.setAttribute("role", "alert");
    toast.setAttribute("aria-live", "assertive");
    toast.setAttribute("aria-atomic", "true");

    toast.innerHTML = `
        <div class="d-flex">
            <div class="toast-body">${message}</div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
        </div>
    `;

    toastContainer.appendChild(toast);

    setTimeout(() => {
        toast.classList.remove("show");
        toast.addEventListener("transitionend", () => toast.remove());
    }, 2000);
}

</script>
{% endblock %}
