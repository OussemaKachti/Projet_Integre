security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email 
                # method: loadVerifiedUserByIdentifier 
    firewalls:
        reset_password:
            pattern: ^/reset-password
            security: false 
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
            entry_point: App\Security\LoginFormAuthenticator
            access_denied_handler: App\Security\AccessDeniedHandler
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\LoginFormAuthenticator

            logout:
                path: app_logout
                # where to redirect after logout
                target: app_home
            user_checker: App\Security\UserChecker        
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
          - { path: ^/reset-password, roles: PUBLIC_ACCESS }
        
        # Admin routes
          - { path: ^/admin, roles: ROLE_ADMINISTRATEUR }
        
        # Public areas - available to everyone
          - { path: ^/login$, roles: PUBLIC_ACCESS }
          - { path: ^/logout$, roles: PUBLIC_ACCESS }
          - { path: ^/user/sign-up, roles: PUBLIC_ACCESS }
          - { path: ^/home$, roles: PUBLIC_ACCESS }
          - { path: ^/$, roles: PUBLIC_ACCESS }
          - { path: ^/access-denied, roles: PUBLIC_ACCESS }
          - { path: ^/confirm-email, roles: PUBLIC_ACCESS }
          - { path: ^/assets/, roles: PUBLIC_ACCESS }
        
        # President club routes
          - { path: ^/presi, roles: ROLE_PRESIDENT_CLUB }
        
        # For all other routes, require authentication
          - { path: ^/, roles: IS_AUTHENTICATED_FULLY }
    
              # Member-only areas (if you have any)
              # - { path: ^/member-only/, roles: ROLE_MEMBRE }
        #   - { path: ^/presi, roles: ROLE_PRESIDENT_CLUB }
              # For the rest of the site, only require the user to be logged in
              # This includes users with NON_MEMBRE role
          
        #   - { path: ^/admin, roles: ROLE_ADMINISTRATEUR }
        # # - { path: ^/login, roles: PUBLIC_ACCESS, allow_if: "not is_authenticated()" }
        # # - { path: ^/user/sign-up, roles: PUBLIC_ACCESS, allow_if: "not is_authenticated()" }
        #   - { path: ^/login$, roles: PUBLIC_ACCESS }
        
    role_hierarchy:
        ROLE_MEMBRE: ROLE_USER
        ROLE_PRESIDENT_CLUB: ROLE_MEMBRE
        ROLE_ADMINISTRATEUR: [ROLE_PRESIDENT_CLUB, ROLE_ALLOWED_TO_SWITCH]
   
        #   - { path: ^/user/sign-up, roles: PUBLIC_ACCESS }
        #   - { path: ^/home$, roles: PUBLIC_ACCESS }
        # #   - { path: ^/contact$, roles: PUBLIC_ACCESS }
        # #   - { path: ^/, roles: is_authenticated() }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
               algorithm: bcrypt
               cost: 12 # Lowest possible value for argon
