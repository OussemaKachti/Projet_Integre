# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration

parameters:
    event_images_directory: '%kernel.project_dir%/public/uploads/events'
    uploads_directory: "%kernel.project_dir%/public/uploads"
    
    profile_pictures_directory: "%kernel.project_dir%/public/uploads/profiles"
    huggingface_api_key: "%env(HUGGINGFACE_API_KEY)%"
    
    # Content moderation models for specific categories
    nsfw_model: "Falconsai/nsfw_image_detection"
    violence_model: "Dabid/abusive-tagalog-profanity-detection"
    hatespeech_model: "facebook/bart-large-mnli"
    caption_model: "Salesforce/blip-image-captioning-base"
    
    kernel.logs_dir: "%kernel.project_dir%/var/log"
    club_images_directory: '%kernel.project_dir%/public/uploads/clubs'

services:
  # Access denied handler
  App\EventListener\UserAuthenticationSubscriber:
    tags:
      - { name: kernel.event_subscriber }
  App\Security\AccessDeniedHandler:
    arguments:
      $urlGenerator: "@router"
      $security: "@security.helper"

  # Login redirect listener
  App\EventListener\LoginRedirectListener:
    arguments:
      $security: "@security.helper"
      $urlGenerator: "@router"
    tags:
      - { name: kernel.event_subscriber }

  _defaults:
    autowire: true # Automatically injects dependencies based on type hints
    autoconfigure: true # Automatically tags services for common interfaces
  App\Service\:
    resource: "../src/Service"
  App\Controller\:
    resource: "../src/Controller" # Loads all controllers from the Controller directory
    tags: ["controller.service_arguments"] # Ensures that arguments for controller actions are resolved
  App\Repository\:
    resource: "../src/Repository" # Loads all repositories from the Repository directory
    tags: ["doctrine.repository_service"] # Ensures that repositories are tagged correctly
  App\Security\:
    resource: "../src/Security"
  App\Service\OpenAIClient:
    arguments:
      $apiKey: "%env(OPENAI_API_KEY)%"
  App\Service\ToxicityDetector:
    arguments:
      $client: "@http_client"
      $apiKey: "%env(OPENAI_API_KEY)%"

  # Configure Content Moderation Service
  App\Service\ContentModerationService:
    arguments:
      $httpClient: "@http_client"
      $huggingFaceApiKey: "%huggingface_api_key%"
      $logger: "@logger"
      $cache: "@cache.app"
      $nsfwModel: "%nsfw_model%"
      $violenceModel: "%violence_model%"
      $hateSpeechModel: "%hatespeech_model%"
      $captionModel: "%caption_model%"
      
  # Configure Warning Email Service with mailtrap
  App\Service\WarningEmailService:
    arguments:
      $mailer: '@mailer.mailtrap_mailer'
      $twig: '@twig'
      $logger: '@logger'
      $senderEmail: 'no-reply@uniclubs.com'
    
  # Configure a mailtrap mailer instance using MAILER_DSN2
  mailer.mailtrap_transport:
    class: Symfony\Component\Mailer\Transport\TransportInterface
    factory: ['Symfony\Component\Mailer\Transport', 'fromDsn']
    arguments: ['%env(MAILER_DSN2)%']
    
  mailer.mailtrap_mailer:
    class: Symfony\Component\Mailer\Mailer
    arguments:
      $transport: '@mailer.mailtrap_transport'
  
  ecnickcom\Tcpdf\Tcpdf:
      public: true
      autowire: true     # Définir un transport personnalisé avec MAILER_DSN3
  app.custom_transport:
        class: Symfony\Component\Mailer\Transport\TransportInterface
        factory: ['@mailer.transport_factory', 'fromString']
        arguments:
            $dsn: '%env(MAILER_DSN)%'

    # Définir un service de mailer personnalisé utilisant le transport personnalisé
  app.custom_mailer:
        class: Symfony\Component\Mailer\Mailer
        arguments:
            $transport: '@app.custom_transport'
            $bus: '@messenger.default_bus' # Optionnel, si vous utilisez Messenger
            $dispatcher: '@event_dispatcher'

    # Injecter le mailer personnalisé dans OrderValidationService
 
  App\EventListener\MissionProgressListener:
        arguments:
            $missionCompletionChecker: '@App\Service\MissionCompletionChecker'
            $logger: '@logger'
        tags:
            - { name: kernel.event_subscriber }
  App\EventListener\EventCreationListener:
        tags:
            - { name: 'doctrine.orm.entity_listener', event: 'postPersist' , method: 'postPersist'}
  App\Service\MissionCompletionChecker:
      autowire: true
  App\Command\:
    resource: "../src/Command"
    tags: ['console.command']
  App\Validator\Constraints\ValidEmailValidator:
        arguments:
            $logger: '@logger'
        tags:
            - { name: validator.constraint_validator }